{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"fast-django","text":"<p>Django-like Developer Experience on ASGI with FastAPI, Tortoise ORM, Aerich, and FastAPI-Admin.</p> <p>fast-django brings the familiar Django development experience to modern ASGI applications, combining the power of FastAPI with Django's developer-friendly patterns.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install fast-django\nfast-django startproject mysite\ncd mysite\npython manage.py runserver\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\ude80 FastAPI-powered: Built on FastAPI for high performance and automatic API documentation</li> <li>\ud83d\uddc4\ufe0f Tortoise ORM: Django-like ORM with async support</li> <li>\ud83d\udd27 Django-style CLI: Familiar <code>manage.py</code> commands for project management</li> <li>\ud83d\udcca Admin Interface: Auto-mounting admin interface with FastAPI-Admin</li> <li>\ud83c\udfd7\ufe0f Scaffolding: Generate projects and apps with <code>startproject</code> and <code>startapp</code></li> <li>\ud83d\udd04 Migrations: Aerich-powered database migrations</li> <li>\u2699\ufe0f Settings Management: Pydantic-based settings with environment variable support</li> <li>\ud83d\udee3\ufe0f Auto-routing: Automatic router discovery and inclusion</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>fast-django provides a clean abstraction layer that combines:</p> <ul> <li>FastAPI for the web framework and API layer</li> <li>Tortoise ORM for database operations and models</li> <li>Aerich for database migrations</li> <li>FastAPI-Admin for the admin interface</li> <li>Pydantic for settings and data validation</li> </ul>"},{"location":"#whats-included","title":"What's Included","text":"<ul> <li>Core Application Factory: <code>create_app()</code> function for app initialization</li> <li>Settings System: Environment-based configuration with <code>FD_</code> prefix</li> <li>ORM Integration: Re-exported Tortoise ORM components</li> <li>CLI Tools: Complete command-line interface for project management</li> <li>Admin System: Pluggable admin interface with model registration</li> <li>Scaffolding: Templates for projects and apps</li> <li>Middleware Support: Easy middleware configuration</li> <li>Auto-discovery: Automatic app and model discovery</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Installation &amp; Setup</li> <li>Project Structure</li> <li>Creating Your First App</li> <li>Database &amp; Models</li> <li>API Routes</li> <li>Admin Interface</li> </ol>"},{"location":"#examples","title":"Examples","text":"<p>Check out our examples to see fast-django in action, including a complete blog application.</p>"},{"location":"admin/","title":"Admin","text":"<p>Use the AdminSite facade to mount admin without touching underlying libs.</p> <pre><code>from fast_django.admin import AdminSite\nfrom fast_django import create_app, Settings\n\napp = create_app(Settings())\nAdminSite().mount(app, Settings())\n</code></pre> <p>To customize per app, add <code>admin.py</code> in the app and define:</p> <pre><code>from fastapi import FastAPI\nfrom fast_django.admin import AdminSite\nfrom fast_django.settings import Settings\n\ndef init_admin(app: FastAPI, settings: Settings) -&gt; None:\n    site = AdminSite(title=\"Admin\")\n    site.mount(app, settings)\n</code></pre> <p>Model registration will be added on top of AdminSite (resource mapping), keeping FastAPI-Admin and ORM internal.</p>"},{"location":"cli/","title":"CLI","text":"<p>fast-django provides a comprehensive command-line interface that mirrors Django's <code>manage.py</code> commands while adding modern ASGI-specific functionality.</p>"},{"location":"cli/#available-commands","title":"Available Commands","text":""},{"location":"cli/#project-management","title":"Project Management","text":""},{"location":"cli/#startproject-name","title":"<code>startproject &lt;name&gt;</code>","text":"<p>Creates a new fast-django project with the specified name.</p> <pre><code>fast-django startproject mysite\n</code></pre> <p>What it creates: - Project directory structure - <code>manage.py</code> script - <code>asgi.py</code> ASGI application entry point - <code>settings.py</code> with basic configuration - <code>orm_config.py</code> for database configuration - <code>aerich.ini</code> for migration management</p>"},{"location":"cli/#startapp-name","title":"<code>startapp &lt;name&gt;</code>","text":"<p>Creates a new app within the current project.</p> <pre><code>fast-django startapp blog\n</code></pre> <p>What it creates: - App directory structure - <code>models.py</code> for database models - <code>urls.py</code> for API routes - <code>views.py</code> for view functions - <code>admin.py</code> for admin configuration - <code>migrations/</code> directory for database migrations</p>"},{"location":"cli/#development-server","title":"Development Server","text":""},{"location":"cli/#runserver-options","title":"<code>runserver [options]</code>","text":"<p>Starts the development server with auto-reload.</p> <pre><code># Basic usage\npython manage.py runserver\n\n# Custom host and port\npython manage.py runserver --host 0.0.0.0 --port 8080\n\n# Disable auto-reload\npython manage.py runserver --no-reload\n</code></pre> <p>Options: - <code>--host</code>: Host to bind to (default: 127.0.0.1) - <code>--port</code>: Port to bind to (default: 8000) - <code>--reload</code>: Enable auto-reload (default: True) - <code>--no-reload</code>: Disable auto-reload</p>"},{"location":"cli/#database-management","title":"Database Management","text":""},{"location":"cli/#makemigrations-app-app_name","title":"<code>makemigrations [--app &lt;app_name&gt;]</code>","text":"<p>Creates database migrations for model changes.</p> <pre><code># Create migrations for all apps\npython manage.py makemigrations\n\n# Create migrations for specific app\npython manage.py makemigrations --app blog\n</code></pre> <p>Features: - Auto-discovers apps with <code>models.py</code> files - Generates <code>orm_config.py</code> if it doesn't exist - Creates migration files in app-specific <code>migrations/</code> directories - Uses Aerich for migration generation</p>"},{"location":"cli/#migrate","title":"<code>migrate</code>","text":"<p>Applies pending database migrations.</p> <pre><code>python manage.py migrate\n</code></pre> <p>What it does: - Applies all pending migrations - Updates database schema - Uses Aerich for migration execution</p>"},{"location":"cli/#user-management","title":"User Management","text":""},{"location":"cli/#createsuperuser","title":"<code>createsuperuser</code>","text":"<p>Creates a superuser account for admin access.</p> <pre><code>python manage.py createsuperuser --email admin@example.com --password secret123\n</code></pre> <p>Options: - <code>--email</code>: Email address for the superuser (required) - <code>--password</code>: Password for the superuser (prompted if not provided) - <code>--models</code>: Specify models module path (optional)</p> <p>Auto-discovery: - Automatically finds User models in your project - Searches for <code>User</code> class in app models - Uses environment variable <code>FD_APP_MODELS</code> if set</p>"},{"location":"cli/#development-tools","title":"Development Tools","text":""},{"location":"cli/#shell","title":"<code>shell</code>","text":"<p>Opens an interactive Python shell with your project context.</p> <pre><code>python manage.py shell\n</code></pre> <p>Features: - Uses IPython if available - Pre-loads your project models and settings - Useful for debugging and data exploration</p>"},{"location":"cli/#command-line-interface","title":"Command Line Interface","text":""},{"location":"cli/#using-fast-django-directly","title":"Using <code>fast-django</code> directly","text":"<p>You can run commands directly with the <code>fast-django</code> command:</p> <pre><code>fast-django startproject mysite\nfast-django startapp blog\nfast-django runserver\n</code></pre>"},{"location":"cli/#using-managepy","title":"Using <code>manage.py</code>","text":"<p>The traditional Django-style approach:</p> <pre><code>python manage.py startproject mysite\npython manage.py startapp blog\npython manage.py runserver\n</code></pre>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"<p>Several commands respect environment variables:</p> <ul> <li><code>FD_TEST_MODE=1</code>: Enables test mode (useful for CI/CD)</li> <li><code>FD_APP_MODELS</code>: Specifies the models module for createsuperuser</li> <li><code>PYTEST_CURRENT_TEST</code>: Automatically detected for test mode</li> </ul>"},{"location":"cli/#examples","title":"Examples","text":""},{"location":"cli/#complete-project-setup","title":"Complete Project Setup","text":"<pre><code># Create project\nfast-django startproject myblog\ncd myblog\n\n# Create blog app\nfast-django startapp blog\n\n# Create migrations\npython manage.py makemigrations\n\n# Apply migrations\npython manage.py migrate\n\n# Create superuser\npython manage.py createsuperuser --email admin@example.com\n\n# Start development server\npython manage.py runserver\n</code></pre>"},{"location":"cli/#development-workflow","title":"Development Workflow","text":"<pre><code># Make model changes in blog/models.py\n# Then create migrations\npython manage.py makemigrations --app blog\n\n# Apply migrations\npython manage.py migrate\n\n# Test in shell\npython manage.py shell\n\n# Run server\npython manage.py runserver\n</code></pre>"},{"location":"cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/#common-issues","title":"Common Issues","text":"<ol> <li>\"Run inside a project directory\"</li> <li>Make sure you're in a directory with <code>pyproject.toml</code></li> <li> <p>Run commands from the project root</p> </li> <li> <p>Migration errors</p> </li> <li>Check that your models are properly imported</li> <li>Ensure <code>orm_config.py</code> is up to date</li> <li> <p>Try recreating migrations with <code>--app</code> flag</p> </li> <li> <p>Admin not accessible</p> </li> <li>Ensure <code>admin_enabled=True</code> in settings</li> <li>Check that <code>fastapi-admin</code> is installed</li> <li>Verify admin path configuration</li> </ol>"},{"location":"cli/#getting-help","title":"Getting Help","text":"<pre><code># Show help for any command\npython manage.py --help\npython manage.py runserver --help\npython manage.py makemigrations --help\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>This section provides comprehensive examples of fast-django applications, from simple tutorials to complete production-ready applications.</p>"},{"location":"examples/#blog-application","title":"Blog Application","text":"<p>A complete blog application demonstrating models, routing, admin interface, and database operations.</p>"},{"location":"examples/#project-setup","title":"Project Setup","text":"<pre><code># Create project\nfast-django startproject myblog\ncd myblog\n\n# Create blog app\nfast-django startapp blog\n</code></pre>"},{"location":"examples/#configuration","title":"Configuration","text":"<p>Update <code>myblog/settings.py</code>:</p> <pre><code>from fast_django.settings import Settings, OrmConfig\n\nclass Settings(Settings):\n    app_name: str = \"My Blog\"\n    debug: bool = True\n    orm: OrmConfig = OrmConfig(\n        models=[\"myblog.models\", \"blog.models\", \"aerich.models\"]\n    )\n    installed_apps: list[str] = [\"myblog\", \"blog\"]\n</code></pre>"},{"location":"examples/#models","title":"Models","text":"<p>Define your blog models in <code>blog/models.py</code>:</p> <pre><code>from fast_django.orm import Model, fields\nfrom datetime import datetime\n\nclass Category(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100, unique=True)\n    slug = fields.CharField(max_length=100, unique=True)\n    description = fields.TextField(null=True)\n    created_at = fields.DatetimeField(auto_now_add=True)\n\nclass Tag(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=50, unique=True)\n    slug = fields.CharField(max_length=50, unique=True)\n    color = fields.CharField(max_length=7, default=\"#000000\")  # Hex color\n\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    slug = fields.CharField(max_length=200, unique=True)\n    content = fields.TextField()\n    excerpt = fields.TextField(max_length=500, null=True)\n    published = fields.BooleanField(default=False)\n    featured = fields.BooleanField(default=False)\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n    published_at = fields.DatetimeField(null=True)\n\n    # Relationships\n    category = fields.ForeignKeyField('models.Category', related_name='posts')\n    tags = fields.ManyToManyField('models.Tag', related_name='posts')\n\nclass Comment(Model):\n    id = fields.IntField(pk=True)\n    post = fields.ForeignKeyField('models.Post', related_name='comments')\n    author_name = fields.CharField(max_length=100)\n    author_email = fields.CharField(max_length=100)\n    content = fields.TextField()\n    approved = fields.BooleanField(default=False)\n    created_at = fields.DatetimeField(auto_now_add=True)\n</code></pre>"},{"location":"examples/#api-routes","title":"API Routes","text":"<p>Create comprehensive API routes in <code>blog/urls.py</code>:</p> <pre><code>from fast_django.routers import APIRouter\nfrom fast_django.orm import DoesNotExist\nfrom fastapi import HTTPException, Query\nfrom typing import List, Optional\nfrom pydantic import BaseModel\nfrom datetime import datetime\n\nrouter = APIRouter(prefix=\"/api/blog\", tags=[\"blog\"])\n\n# Pydantic models for request/response\nclass PostCreate(BaseModel):\n    title: str\n    content: str\n    excerpt: Optional[str] = None\n    category_id: int\n    tag_ids: List[int] = []\n    published: bool = False\n    featured: bool = False\n\nclass PostUpdate(BaseModel):\n    title: Optional[str] = None\n    content: Optional[str] = None\n    excerpt: Optional[str] = None\n    category_id: Optional[int] = None\n    tag_ids: Optional[List[int]] = None\n    published: Optional[bool] = None\n    featured: Optional[bool] = None\n\nclass PostResponse(BaseModel):\n    id: int\n    title: str\n    slug: str\n    content: str\n    excerpt: Optional[str]\n    published: bool\n    featured: bool\n    created_at: datetime\n    updated_at: datetime\n    published_at: Optional[datetime]\n    category: dict\n    tags: List[dict]\n\n    class Config:\n        from_attributes = True\n\n# Category endpoints\n@router.get(\"/categories\", response_model=List[dict])\nasync def list_categories():\n    categories = await Category.all()\n    return [{\"id\": c.id, \"name\": c.name, \"slug\": c.slug} for c in categories]\n\n@router.post(\"/categories\")\nasync def create_category(name: str, slug: str, description: str = None):\n    category = await Category.create(\n        name=name,\n        slug=slug,\n        description=description\n    )\n    return {\"id\": category.id, \"name\": category.name}\n\n# Tag endpoints\n@router.get(\"/tags\", response_model=List[dict])\nasync def list_tags():\n    tags = await Tag.all()\n    return [{\"id\": t.id, \"name\": t.name, \"slug\": t.slug, \"color\": t.color} for t in tags]\n\n@router.post(\"/tags\")\nasync def create_tag(name: str, slug: str, color: str = \"#000000\"):\n    tag = await Tag.create(name=name, slug=slug, color=color)\n    return {\"id\": tag.id, \"name\": tag.name}\n\n# Post endpoints\n@router.get(\"/posts\", response_model=List[PostResponse])\nasync def list_posts(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(10, ge=1, le=100),\n    published: Optional[bool] = None,\n    category_id: Optional[int] = None,\n    featured: Optional[bool] = None\n):\n    query = Post.all()\n\n    if published is not None:\n        query = query.filter(published=published)\n    if category_id is not None:\n        query = query.filter(category_id=category_id)\n    if featured is not None:\n        query = query.filter(featured=featured)\n\n    posts = await query.offset(skip).limit(limit).prefetch_related('category', 'tags')\n\n    return [\n        PostResponse(\n            id=post.id,\n            title=post.title,\n            slug=post.slug,\n            content=post.content,\n            excerpt=post.excerpt,\n            published=post.published,\n            featured=post.featured,\n            created_at=post.created_at,\n            updated_at=post.updated_at,\n            published_at=post.published_at,\n            category={\"id\": post.category.id, \"name\": post.category.name},\n            tags=[{\"id\": tag.id, \"name\": tag.name} for tag in post.tags]\n        ) for post in posts\n    ]\n\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post(post_id: int):\n    try:\n        post = await Post.get(id=post_id).prefetch_related('category', 'tags')\n        return PostResponse(\n            id=post.id,\n            title=post.title,\n            slug=post.slug,\n            content=post.content,\n            excerpt=post.excerpt,\n            published=post.published,\n            featured=post.featured,\n            created_at=post.created_at,\n            updated_at=post.updated_at,\n            published_at=post.published_at,\n            category={\"id\": post.category.id, \"name\": post.category.name},\n            tags=[{\"id\": tag.id, \"name\": tag.name} for tag in post.tags]\n        )\n    except DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n\n@router.post(\"/posts\", response_model=PostResponse)\nasync def create_post(post: PostCreate):\n    # Create slug from title\n    slug = post.title.lower().replace(\" \", \"-\").replace(\"_\", \"-\")\n\n    # Get category\n    try:\n        category = await Category.get(id=post.category_id)\n    except DoesNotExist:\n        raise HTTPException(status_code=400, detail=\"Category not found\")\n\n    # Create post\n    db_post = await Post.create(\n        title=post.title,\n        slug=slug,\n        content=post.content,\n        excerpt=post.excerpt,\n        published=post.published,\n        featured=post.featured,\n        category=category,\n        published_at=datetime.now() if post.published else None\n    )\n\n    # Add tags\n    if post.tag_ids:\n        tags = await Tag.filter(id__in=post.tag_ids)\n        await db_post.tags.add(*tags)\n\n    return PostResponse.from_orm(db_post)\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(post_id: int, post: PostUpdate):\n    try:\n        db_post = await Post.get(id=post_id)\n    except DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n\n    # Update fields\n    update_data = post.dict(exclude_unset=True)\n    if 'category_id' in update_data:\n        try:\n            category = await Category.get(id=update_data['category_id'])\n            update_data['category'] = category\n            del update_data['category_id']\n        except DoesNotExist:\n            raise HTTPException(status_code=400, detail=\"Category not found\")\n\n    for field, value in update_data.items():\n        if field != 'tag_ids':\n            setattr(db_post, field, value)\n\n    await db_post.save()\n\n    # Update tags\n    if 'tag_ids' in update_data:\n        tags = await Tag.filter(id__in=update_data['tag_ids'])\n        await db_post.tags.clear()\n        await db_post.tags.add(*tags)\n\n    return PostResponse.from_orm(db_post)\n\n@router.delete(\"/posts/{post_id}\")\nasync def delete_post(post_id: int):\n    try:\n        post = await Post.get(id=post_id)\n        await post.delete()\n        return {\"message\": \"Post deleted successfully\"}\n    except DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n\n# Comment endpoints\n@router.get(\"/posts/{post_id}/comments\")\nasync def list_comments(post_id: int, approved_only: bool = True):\n    try:\n        post = await Post.get(id=post_id)\n    except DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n\n    query = Comment.filter(post=post)\n    if approved_only:\n        query = query.filter(approved=True)\n\n    comments = await query.order_by('-created_at')\n    return [{\"id\": c.id, \"author_name\": c.author_name, \"content\": c.content, \"created_at\": c.created_at} for c in comments]\n\n@router.post(\"/posts/{post_id}/comments\")\nasync def create_comment(post_id: int, author_name: str, author_email: str, content: str):\n    try:\n        post = await Post.get(id=post_id)\n    except DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n\n    comment = await Comment.create(\n        post=post,\n        author_name=author_name,\n        author_email=author_email,\n        content=content\n    )\n\n    return {\"id\": comment.id, \"message\": \"Comment created successfully\"}\n</code></pre>"},{"location":"examples/#admin-configuration","title":"Admin Configuration","text":"<p>Set up admin interface in <code>blog/admin.py</code>:</p> <pre><code>from fastapi import FastAPI\nfrom fast_django.admin import AdminSite\nfrom fast_django.settings import Settings\n\ndef init_admin(app: FastAPI, settings: Settings) -&gt; None:\n    site = AdminSite(title=\"Blog Admin\")\n    site.mount(app, settings)\n\n    # Register models when model registration is implemented\n    # site.register_model(Post)\n    # site.register_model(Category)\n    # site.register_model(Tag)\n    # site.register_model(Comment)\n</code></pre>"},{"location":"examples/#database-setup","title":"Database Setup","text":"<pre><code># Create migrations\npython manage.py makemigrations\n\n# Apply migrations\npython manage.py migrate\n\n# Create superuser\npython manage.py createsuperuser --email admin@example.com\n\n# Start development server\npython manage.py runserver\n</code></pre>"},{"location":"examples/#e-commerce-api","title":"E-commerce API","text":"<p>A more complex example showing user management, product catalog, and order processing.</p>"},{"location":"examples/#models_1","title":"Models","text":"<pre><code># users/models.py\nfrom fast_django.orm import Model, fields\nfrom passlib.context import CryptContext\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\nclass User(Model):\n    id = fields.IntField(pk=True)\n    email = fields.CharField(max_length=100, unique=True)\n    username = fields.CharField(max_length=50, unique=True)\n    password_hash = fields.CharField(max_length=128)\n    first_name = fields.CharField(max_length=50)\n    last_name = fields.CharField(max_length=50)\n    is_active = fields.BooleanField(default=True)\n    is_staff = fields.BooleanField(default=False)\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    def set_password(self, password: str):\n        self.password_hash = pwd_context.hash(password)\n\n    def check_password(self, password: str) -&gt; bool:\n        return pwd_context.verify(password, self.password_hash)\n\n# products/models.py\nclass Category(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100)\n    slug = fields.CharField(max_length=100, unique=True)\n    description = fields.TextField(null=True)\n    parent = fields.ForeignKeyField('models.Category', null=True, related_name='children')\n\nclass Product(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=200)\n    slug = fields.CharField(max_length=200, unique=True)\n    description = fields.TextField()\n    price = fields.DecimalField(max_digits=10, decimal_places=2)\n    stock_quantity = fields.IntField(default=0)\n    sku = fields.CharField(max_length=100, unique=True)\n    active = fields.BooleanField(default=True)\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n\n    category = fields.ForeignKeyField('models.Category', related_name='products')\n    tags = fields.ManyToManyField('models.Tag', related_name='products')\n\nclass Order(Model):\n    id = fields.IntField(pk=True)\n    user = fields.ForeignKeyField('models.User', related_name='orders')\n    status = fields.CharField(max_length=20, default='pending')  # pending, paid, shipped, delivered, cancelled\n    total_amount = fields.DecimalField(max_digits=10, decimal_places=2)\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n\n    items = fields.ManyToManyField('models.OrderItem', related_name='order')\n\nclass OrderItem(Model):\n    id = fields.IntField(pk=True)\n    order = fields.ForeignKeyField('models.Order', related_name='order_items')\n    product = fields.ForeignKeyField('models.Product', related_name='order_items')\n    quantity = fields.IntField()\n    unit_price = fields.DecimalField(max_digits=10, decimal_places=2)\n    total_price = fields.DecimalField(max_digits=10, decimal_places=2)\n</code></pre>"},{"location":"examples/#api-routes_1","title":"API Routes","text":"<pre><code># products/routes.py\nfrom fast_django.routers import APIRouter\nfrom fastapi import HTTPException, Depends\nfrom typing import List, Optional\nfrom pydantic import BaseModel\n\nrouter = APIRouter(prefix=\"/api/products\", tags=[\"products\"])\n\nclass ProductResponse(BaseModel):\n    id: int\n    name: str\n    slug: str\n    description: str\n    price: float\n    stock_quantity: int\n    sku: str\n    active: bool\n    category: dict\n    tags: List[dict]\n\n@router.get(\"/\", response_model=List[ProductResponse])\nasync def list_products(\n    skip: int = 0,\n    limit: int = 20,\n    category_id: Optional[int] = None,\n    min_price: Optional[float] = None,\n    max_price: Optional[float] = None,\n    search: Optional[str] = None\n):\n    query = Product.filter(active=True)\n\n    if category_id:\n        query = query.filter(category_id=category_id)\n    if min_price is not None:\n        query = query.filter(price__gte=min_price)\n    if max_price is not None:\n        query = query.filter(price__lte=max_price)\n    if search:\n        query = query.filter(name__icontains=search)\n\n    products = await query.offset(skip).limit(limit).prefetch_related('category', 'tags')\n\n    return [\n        ProductResponse(\n            id=p.id,\n            name=p.name,\n            slug=p.slug,\n            description=p.description,\n            price=float(p.price),\n            stock_quantity=p.stock_quantity,\n            sku=p.sku,\n            active=p.active,\n            category={\"id\": p.category.id, \"name\": p.category.name},\n            tags=[{\"id\": t.id, \"name\": t.name} for t in p.tags]\n        ) for p in products\n    ]\n\n@router.get(\"/{product_id}\", response_model=ProductResponse)\nasync def get_product(product_id: int):\n    try:\n        product = await Product.get(id=product_id, active=True).prefetch_related('category', 'tags')\n        return ProductResponse.from_orm(product)\n    except DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n</code></pre>"},{"location":"examples/#real-time-chat-application","title":"Real-time Chat Application","text":"<p>An example using WebSockets for real-time communication.</p>"},{"location":"examples/#models_2","title":"Models","text":"<pre><code># chat/models.py\nfrom fast_django.orm import Model, fields\nfrom datetime import datetime\n\nclass ChatRoom(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100)\n    description = fields.TextField(null=True)\n    created_by = fields.ForeignKeyField('models.User', related_name='created_rooms')\n    created_at = fields.DatetimeField(auto_now_add=True)\n    is_private = fields.BooleanField(default=False)\n\n    members = fields.ManyToManyField('models.User', related_name='chat_rooms')\n\nclass Message(Model):\n    id = fields.IntField(pk=True)\n    room = fields.ForeignKeyField('models.ChatRoom', related_name='messages')\n    sender = fields.ForeignKeyField('models.User', related_name='sent_messages')\n    content = fields.TextField()\n    message_type = fields.CharField(max_length=20, default='text')  # text, image, file\n    created_at = fields.DatetimeField(auto_now_add=True)\n    edited_at = fields.DatetimeField(null=True)\n    is_deleted = fields.BooleanField(default=False)\n</code></pre>"},{"location":"examples/#websocket-routes","title":"WebSocket Routes","text":"<pre><code># chat/websocket.py\nfrom fastapi import WebSocket, WebSocketDisconnect\nfrom fast_django.routers import APIRouter\nimport json\n\nrouter = APIRouter(prefix=\"/ws\", tags=[\"websocket\"])\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n        self.room_connections: Dict[int, List[WebSocket]] = {}\n\n    async def connect(self, websocket: WebSocket, room_id: int):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n        if room_id not in self.room_connections:\n            self.room_connections[room_id] = []\n        self.room_connections[room_id].append(websocket)\n\n    def disconnect(self, websocket: WebSocket, room_id: int):\n        self.active_connections.remove(websocket)\n        if room_id in self.room_connections:\n            self.room_connections[room_id].remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast_to_room(self, message: str, room_id: int):\n        if room_id in self.room_connections:\n            for connection in self.room_connections[room_id]:\n                try:\n                    await connection.send_text(message)\n                except:\n                    # Remove dead connections\n                    self.room_connections[room_id].remove(connection)\n\nmanager = ConnectionManager()\n\n@router.websocket(\"/chat/{room_id}\")\nasync def websocket_endpoint(websocket: WebSocket, room_id: int):\n    await manager.connect(websocket, room_id)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message_data = json.loads(data)\n\n            # Save message to database\n            message = await Message.create(\n                room_id=room_id,\n                sender_id=message_data['user_id'],\n                content=message_data['content'],\n                message_type=message_data.get('type', 'text')\n            )\n\n            # Broadcast to room\n            await manager.broadcast_to_room(\n                json.dumps({\n                    \"id\": message.id,\n                    \"content\": message.content,\n                    \"sender\": message_data['username'],\n                    \"timestamp\": message.created_at.isoformat(),\n                    \"type\": message.message_type\n                }),\n                room_id\n            )\n    except WebSocketDisconnect:\n        manager.disconnect(websocket, room_id)\n</code></pre>"},{"location":"examples/#best-practices","title":"Best Practices","text":"<ol> <li>Structure your code with clear separation of concerns</li> <li>Use Pydantic models for request/response validation</li> <li>Handle errors gracefully with appropriate HTTP status codes</li> <li>Use async/await for all database operations</li> <li>Implement proper authentication and authorization</li> <li>Add comprehensive logging for debugging and monitoring</li> <li>Write tests for your API endpoints</li> <li>Use environment variables for configuration</li> <li>Implement rate limiting for production APIs</li> <li>Add API documentation with clear examples</li> </ol>"},{"location":"examples/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference:</li> <li>Core API</li> <li>ORM API</li> <li>CLI API</li> <li>Read about Migrations and Settings</li> <li>Review Middleware and Routing</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will walk you through setting up your first fast-django project and understanding the core concepts.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install fast-django using pip:</p> <pre><code>pip install fast-django\n</code></pre> <p>For development with documentation support:</p> <pre><code>pip install \"fast-django[docs]\"\n</code></pre>"},{"location":"getting-started/#creating-your-first-project","title":"Creating Your First Project","text":""},{"location":"getting-started/#1-start-a-new-project","title":"1. Start a New Project","text":"<pre><code>fast-django startproject mysite\ncd mysite\n</code></pre> <p>This creates a new project with the following structure:</p> <pre><code>mysite/\n\u251c\u2500\u2500 manage.py              # Django-style management script\n\u251c\u2500\u2500 orm_config.py          # Auto-generated ORM configuration\n\u251c\u2500\u2500 aerich.ini            # Aerich migration configuration\n\u2514\u2500\u2500 mysite/               # Project package\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 asgi.py           # ASGI application entry point\n    \u251c\u2500\u2500 settings.py       # Project settings\n    \u251c\u2500\u2500 urls.py           # Main URL routing\n    \u251c\u2500\u2500 models.py         # Project-level models\n    \u2514\u2500\u2500 admin.py          # Admin configuration\n</code></pre>"},{"location":"getting-started/#2-understanding-the-project-structure","title":"2. Understanding the Project Structure","text":""},{"location":"getting-started/#managepy","title":"<code>manage.py</code>","text":"<p>The main entry point for CLI commands, similar to Django's manage.py:</p> <pre><code>#!/usr/bin/env python3\nfrom fast_django.cli.main import app\n\nif __name__ == \"__main__\":\n    app()\n</code></pre>"},{"location":"getting-started/#settingspy","title":"<code>settings.py</code>","text":"<p>Your project's configuration file:</p> <pre><code>from fast_django.settings import Settings, OrmConfig\n\nclass Settings(Settings):\n    app_name: str = \"mysite\"\n    debug: bool = True\n    orm: OrmConfig = OrmConfig(models=[\"mysite.models\", \"aerich.models\"])\n    installed_apps: list[str] = [\"mysite\"]\n</code></pre>"},{"location":"getting-started/#asgipy","title":"<code>asgi.py</code>","text":"<p>The ASGI application entry point:</p> <pre><code>from mysite.settings import Settings\nfrom fast_django import create_app\n\nsettings = Settings()\napp = create_app(settings)\n</code></pre>"},{"location":"getting-started/#3-running-the-development-server","title":"3. Running the Development Server","text":"<pre><code>python manage.py runserver\n</code></pre> <p>This starts the development server on <code>http://127.0.0.1:8000</code> with auto-reload enabled.</p> <p>Visit <code>http://127.0.0.1:8000/docs</code> to see the automatic API documentation.</p>"},{"location":"getting-started/#creating-your-first-app","title":"Creating Your First App","text":""},{"location":"getting-started/#1-generate-an-app","title":"1. Generate an App","text":"<pre><code>fast-django startapp blog\n</code></pre> <p>This creates a new app with the following structure:</p> <pre><code>blog/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 models.py      # App models\n\u251c\u2500\u2500 urls.py        # API routes (primary)\n\u251c\u2500\u2500 views.py       # View functions\n\u251c\u2500\u2500 admin.py       # Admin configuration\n\u2514\u2500\u2500 migrations/    # Database migrations\n    \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"getting-started/#2-add-the-app-to-settings","title":"2. Add the App to Settings","text":"<p>Update <code>mysite/settings.py</code>:</p> <pre><code>class Settings(Settings):\n    app_name: str = \"mysite\"\n    debug: bool = True\n    orm: OrmConfig = OrmConfig(\n        models=[\"mysite.models\", \"blog.models\", \"aerich.models\"]\n    )\n    installed_apps: list[str] = [\"mysite\", \"blog\"]\n</code></pre>"},{"location":"getting-started/#3-define-models","title":"3. Define Models","text":"<p>In <code>blog/models.py</code>:</p> <pre><code>from fast_django.orm import Model, fields\n\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    content = fields.TextField()\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n</code></pre>"},{"location":"getting-started/#4-create-api-routes","title":"4. Create API Routes","text":"<p>In <code>blog/routes.py</code>:</p> <pre><code>from fast_django.routers import APIRouter\nfrom .models import Post\n\nrouter = APIRouter()\n\n@router.get(\"/posts\")\nasync def list_posts():\n    posts = await Post.all()\n    return [{\"id\": post.id, \"title\": post.title} for post in posts]\n\n@router.post(\"/posts\")\nasync def create_post(title: str, content: str):\n    post = await Post.create(title=title, content=content)\n    return {\"id\": post.id, \"title\": post.title}\n</code></pre>"},{"location":"getting-started/#database-management","title":"Database Management","text":""},{"location":"getting-started/#migrations","title":"Migrations","text":"<p>fast-django uses Aerich for database migrations with automatic discovery:</p> <pre><code># Create migrations for all apps\npython manage.py makemigrations\n\n# Create migrations for a specific app\npython manage.py makemigrations --app blog\n\n# Apply migrations\npython manage.py migrate\n</code></pre>"},{"location":"getting-started/#database-configuration","title":"Database Configuration","text":"<p>Configure your database in <code>settings.py</code>:</p> <pre><code>class Settings(Settings):\n    orm: OrmConfig = OrmConfig(\n        connections={\n            \"default\": \"sqlite://db.sqlite3\",  # SQLite\n            # \"default\": \"postgres://user:pass@localhost/db\",  # PostgreSQL\n            # \"default\": \"mysql://user:pass@localhost/db\",     # MySQL\n        },\n        models=[\"mysite.models\", \"blog.models\", \"aerich.models\"]\n    )\n</code></pre>"},{"location":"getting-started/#admin-interface","title":"Admin Interface","text":"<p>The admin interface is automatically mounted when enabled in settings:</p> <pre><code>class Settings(Settings):\n    admin_enabled: bool = True\n    admin_path: str = \"/admin\"\n</code></pre> <p>Access the admin at <code>http://127.0.0.1:8000/admin</code>.</p>"},{"location":"getting-started/#custom-admin-configuration","title":"Custom Admin Configuration","text":"<p>Create <code>blog/admin.py</code>:</p> <pre><code>from fastapi import FastAPI\nfrom fast_django.admin import AdminSite\nfrom fast_django.settings import Settings\n\ndef init_admin(app: FastAPI, settings: Settings) -&gt; None:\n    site = AdminSite(title=\"Blog Admin\")\n    site.mount(app, settings)\n    # Register models here when model registration is implemented\n</code></pre>"},{"location":"getting-started/#environment-configuration","title":"Environment Configuration","text":"<p>fast-django supports environment variables with the <code>FD_</code> prefix:</p> <pre><code># .env file\nFD_DEBUG=true\nFD_APP_NAME=\"My Awesome App\"\nFD_SECRET_KEY=\"your-secret-key-here\"\nFD_ADMIN_ENABLED=true\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about ORM and Models</li> <li>Explore Routing and Views</li> <li>Set up Middleware</li> <li>Configure Settings</li> <li>Check out Examples</li> </ul>"},{"location":"middleware/","title":"Middleware","text":"<ul> <li>Add dotted middleware paths in <code>Settings.middleware</code>.</li> <li>They will be added in order during app creation.</li> </ul> <pre><code>from fast_django.settings import Settings\n\nclass My(Settings):\n    middleware = [\n        \"fastapi.middleware.cors.CORSMiddleware\",\n        \"fastapi.middleware.gzip.GZipMiddleware\",\n    ]\n</code></pre>"},{"location":"migrations/","title":"Migrations","text":"<ul> <li>Use <code>python manage.py makemigrations</code> to generate migrations.</li> <li>Auto-discovers all app folders with a <code>models.py</code> file and writes <code>orm_config.py</code>.</li> <li>For per-app migrations, use <code>--app &lt;app_name&gt;</code>; migration files are stored under <code>&lt;app_name&gt;/migrations/</code>.</li> </ul> <p>Commands:</p> <pre><code>python manage.py makemigrations          # all apps with models.py\npython manage.py makemigrations --app blog\npython manage.py migrate\n</code></pre> <p>Notes: - The generated <code>orm_config.py</code> exposes <code>ORM</code> consumed by Aerich. - You can customize <code>ORM</code> later for multi-database setups.</p>"},{"location":"orm/","title":"ORM","text":"<p>fast-django uses Tortoise ORM, providing a Django-like ORM experience with async support. All Tortoise ORM components are re-exported through <code>fast_django.orm</code> for convenience.</p>"},{"location":"orm/#quick-start","title":"Quick Start","text":"<pre><code>from fast_django.orm import Model, fields, Tortoise, run_async\n\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    content = fields.TextField()\n    created_at = fields.DatetimeField(auto_now_add=True)\n    is_published = fields.BooleanField(default=False)\n</code></pre>"},{"location":"orm/#models","title":"Models","text":""},{"location":"orm/#basic-model-definition","title":"Basic Model Definition","text":"<pre><code>from fast_django.orm import Model, fields\n\nclass User(Model):\n    id = fields.IntField(pk=True)\n    username = fields.CharField(max_length=50, unique=True)\n    email = fields.CharField(max_length=100, unique=True)\n    created_at = fields.DatetimeField(auto_now_add=True)\n    is_active = fields.BooleanField(default=True)\n</code></pre>"},{"location":"orm/#field-types","title":"Field Types","text":"<p>fast-django supports all Tortoise ORM field types:</p>"},{"location":"orm/#text-fields","title":"Text Fields","text":"<pre><code># CharField with max length\ntitle = fields.CharField(max_length=200)\n\n# TextField for longer content\ncontent = fields.TextField()\n\n# JSONField for structured data\nmetadata = fields.JSONField(default=dict)\n</code></pre>"},{"location":"orm/#numeric-fields","title":"Numeric Fields","text":"<pre><code># Integer fields\nid = fields.IntField(pk=True)\nage = fields.IntField(null=True)\n\n# Float fields\nprice = fields.FloatField()\nrating = fields.FloatField(null=True)\n\n# Decimal fields\namount = fields.DecimalField(max_digits=10, decimal_places=2)\n</code></pre>"},{"location":"orm/#datetime-fields","title":"Date/Time Fields","text":"<pre><code># DateTime fields\ncreated_at = fields.DatetimeField(auto_now_add=True)\nupdated_at = fields.DatetimeField(auto_now=True)\npublished_at = fields.DatetimeField(null=True)\n\n# Date fields\nbirth_date = fields.DateField(null=True)\n\n# Time fields\nstart_time = fields.TimeField(null=True)\n</code></pre>"},{"location":"orm/#boolean-fields","title":"Boolean Fields","text":"<pre><code>is_active = fields.BooleanField(default=True)\nis_verified = fields.BooleanField(default=False)\n</code></pre>"},{"location":"orm/#foreign-key-relationships","title":"Foreign Key Relationships","text":"<pre><code>class Category(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100)\n\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    category = fields.ForeignKeyField('models.Category', related_name='posts')\n    author = fields.ForeignKeyField('models.User', related_name='posts')\n</code></pre>"},{"location":"orm/#many-to-many-relationships","title":"Many-to-Many Relationships","text":"<pre><code>class Tag(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=50, unique=True)\n\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    tags = fields.ManyToManyField('models.Tag', related_name='posts')\n</code></pre>"},{"location":"orm/#database-operations","title":"Database Operations","text":""},{"location":"orm/#creating-records","title":"Creating Records","text":"<pre><code># Create a single record\nuser = await User.create(\n    username=\"john_doe\",\n    email=\"john@example.com\"\n)\n\n# Create multiple records\nusers = await User.bulk_create([\n    User(username=\"user1\", email=\"user1@example.com\"),\n    User(username=\"user2\", email=\"user2@example.com\"),\n])\n</code></pre>"},{"location":"orm/#querying-records","title":"Querying Records","text":"<pre><code># Get all records\nall_users = await User.all()\n\n# Get a single record\nuser = await User.get(id=1)\n\n# Get with error handling\ntry:\n    user = await User.get(username=\"john_doe\")\nexcept DoesNotExist:\n    print(\"User not found\")\n\n# Filter records\nactive_users = await User.filter(is_active=True)\nrecent_users = await User.filter(created_at__gte=datetime.now() - timedelta(days=7))\n\n# Ordering\nusers = await User.all().order_by('-created_at')\n\n# Limiting\nrecent_users = await User.all().order_by('-created_at').limit(10)\n</code></pre>"},{"location":"orm/#updating-records","title":"Updating Records","text":"<pre><code># Update a single record\nuser = await User.get(id=1)\nuser.email = \"newemail@example.com\"\nawait user.save()\n\n# Bulk update\nawait User.filter(is_active=False).update(is_active=True)\n\n# Update with values\nawait User.filter(id=1).update(email=\"updated@example.com\")\n</code></pre>"},{"location":"orm/#deleting-records","title":"Deleting Records","text":"<pre><code># Delete a single record\nuser = await User.get(id=1)\nawait user.delete()\n\n# Bulk delete\nawait User.filter(is_active=False).delete()\n</code></pre>"},{"location":"orm/#relationships","title":"Relationships","text":""},{"location":"orm/#one-to-many","title":"One-to-Many","text":"<pre><code>class Author(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100)\n\nclass Book(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    author = fields.ForeignKeyField('models.Author', related_name='books')\n\n# Query with relationships\nbooks = await Book.all().prefetch_related('author')\nfor book in books:\n    print(f\"{book.title} by {book.author.name}\")\n\n# Reverse relationship\nauthor = await Author.get(id=1)\nauthor_books = await author.books.all()\n</code></pre>"},{"location":"orm/#many-to-many","title":"Many-to-Many","text":"<pre><code>class Tag(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=50)\n\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    tags = fields.ManyToManyField('models.Tag', related_name='posts')\n\n# Add tags to a post\npost = await Post.get(id=1)\ntag = await Tag.get(name=\"python\")\nawait post.tags.add(tag)\n\n# Get posts with tags\nposts = await Post.all().prefetch_related('tags')\n</code></pre>"},{"location":"orm/#database-configuration","title":"Database Configuration","text":""},{"location":"orm/#settings-configuration","title":"Settings Configuration","text":"<pre><code>from fast_django.settings import Settings, OrmConfig\n\nclass Settings(Settings):\n    orm: OrmConfig = OrmConfig(\n        connections={\n            \"default\": \"sqlite://db.sqlite3\",\n            # \"default\": \"postgres://user:pass@localhost/db\",\n            # \"default\": \"mysql://user:pass@localhost/db\",\n        },\n        models=[\"myapp.models\", \"aerich.models\"],\n        apps={\n            \"models\": {\n                \"models\": [\"myapp.models\", \"aerich.models\"],\n                \"default_connection\": \"default\",\n            }\n        }\n    )\n</code></pre>"},{"location":"orm/#environment-variables","title":"Environment Variables","text":"<pre><code># .env file\nFD_ORM_CONNECTIONS_DEFAULT=sqlite://db.sqlite3\nFD_ORM_MODELS_0=myapp.models\nFD_ORM_MODELS_1=aerich.models\n</code></pre>"},{"location":"orm/#migrations","title":"Migrations","text":"<p>fast-django uses Aerich for database migrations:</p> <pre><code># Create migrations\npython manage.py makemigrations\n\n# Apply migrations\npython manage.py migrate\n\n# Create migrations for specific app\npython manage.py makemigrations --app myapp\n</code></pre>"},{"location":"orm/#async-context","title":"Async Context","text":""},{"location":"orm/#using-with-fastapi","title":"Using with FastAPI","text":"<pre><code>from fastapi import FastAPI\nfrom fast_django import create_app, Settings\n\napp = create_app(Settings())\n\n@app.get(\"/users\")\nasync def get_users():\n    users = await User.all()\n    return [{\"id\": u.id, \"username\": u.username} for u in users]\n</code></pre>"},{"location":"orm/#manual-database-operations","title":"Manual Database Operations","text":"<pre><code>from fast_django.orm import Tortoise, run_async\n\nasync def main():\n    await Tortoise.init(\n        db_url=\"sqlite://db.sqlite3\",\n        modules={\"models\": [\"myapp.models\"]}\n    )\n\n    # Your database operations here\n    users = await User.all()\n\n    await Tortoise.close_connections()\n\n# Run the async function\nrun_async(main())\n</code></pre>"},{"location":"orm/#advanced-features","title":"Advanced Features","text":""},{"location":"orm/#custom-managers","title":"Custom Managers","text":"<pre><code>class PostManager:\n    @staticmethod\n    async def published():\n        return await Post.filter(is_published=True)\n\n    @staticmethod\n    async def recent(limit=10):\n        return await Post.all().order_by('-created_at').limit(limit)\n\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    is_published = fields.BooleanField(default=False)\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    objects = PostManager()\n</code></pre>"},{"location":"orm/#model-methods","title":"Model Methods","text":"<pre><code>class User(Model):\n    id = fields.IntField(pk=True)\n    first_name = fields.CharField(max_length=50)\n    last_name = fields.CharField(max_length=50)\n\n    @property\n    def full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n\n    async def get_posts(self):\n        return await Post.filter(author=self)\n</code></pre>"},{"location":"orm/#transactions","title":"Transactions","text":"<pre><code>from fast_django.orm import in_transaction\n\nasync def transfer_money(from_user, to_user, amount):\n    async with in_transaction():\n        from_user.balance -= amount\n        to_user.balance += amount\n        await from_user.save()\n        await to_user.save()\n</code></pre>"},{"location":"orm/#best-practices","title":"Best Practices","text":"<ol> <li>Always use async/await for database operations</li> <li>Use prefetch_related() for related objects to avoid N+1 queries</li> <li>Use select_related() for foreign key relationships</li> <li>Handle DoesNotExist exceptions when using <code>.get()</code></li> <li>Use transactions for operations that must succeed or fail together</li> <li>Index frequently queried fields for better performance</li> </ol>"},{"location":"orm/#troubleshooting","title":"Troubleshooting","text":""},{"location":"orm/#common-issues","title":"Common Issues","text":"<ol> <li>\"Database not initialized\"</li> <li>Ensure <code>Tortoise.init()</code> is called before database operations</li> <li> <p>Check your database URL format</p> </li> <li> <p>\"Model not found\"</p> </li> <li>Verify models are included in <code>Settings.orm.models</code></li> <li> <p>Check import paths are correct</p> </li> <li> <p>Migration errors</p> </li> <li>Run <code>python manage.py makemigrations</code> after model changes</li> <li>Check for conflicting field changes</li> </ol>"},{"location":"routing/","title":"Routing","text":"<p>fast-django uses FastAPI's routing system with automatic router discovery and inclusion. Routes are defined using APIRouter and automatically included when apps are registered in <code>installed_apps</code>.</p>"},{"location":"routing/#basic-routing","title":"Basic Routing","text":""},{"location":"routing/#creating-a-router","title":"Creating a Router","text":"<pre><code>from fast_django.routers import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/healthz\")\ndef healthz():\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"routing/#auto-discovery","title":"Auto-Discovery","text":"<p>fast-django automatically discovers routers in your apps by looking for: - <code>urls.py</code> - Primary router file (Django-style) - <code>routes.py</code> - Compatibility shim that can re-export from <code>urls.py</code> - <code>api.py</code> - API-specific routes - <code>views.py</code> - View-based routes</p> <p>The first file found with a <code>router</code> variable will be included.</p>"},{"location":"routing/#route-definition","title":"Route Definition","text":""},{"location":"routing/#http-methods","title":"HTTP Methods","text":"<pre><code>from fast_django.routers import APIRouter\n\nrouter = APIRouter()\n\n# GET endpoint\n@router.get(\"/posts\")\nasync def list_posts():\n    return {\"posts\": []}\n\n# POST endpoint\n@router.post(\"/posts\")\nasync def create_post(title: str, content: str):\n    return {\"message\": \"Post created\", \"title\": title}\n\n# PUT endpoint\n@router.put(\"/posts/{post_id}\")\nasync def update_post(post_id: int, title: str, content: str):\n    return {\"message\": f\"Post {post_id} updated\"}\n\n# DELETE endpoint\n@router.delete(\"/posts/{post_id}\")\nasync def delete_post(post_id: int):\n    return {\"message\": f\"Post {post_id} deleted\"}\n\n# PATCH endpoint\n@router.patch(\"/posts/{post_id}\")\nasync def partial_update_post(post_id: int, **updates):\n    return {\"message\": f\"Post {post_id} partially updated\", \"updates\": updates}\n</code></pre>"},{"location":"routing/#path-parameters","title":"Path Parameters","text":"<pre><code>@router.get(\"/posts/{post_id}\")\nasync def get_post(post_id: int):\n    return {\"post_id\": post_id, \"title\": \"Sample Post\"}\n\n@router.get(\"/users/{user_id}/posts/{post_id}\")\nasync def get_user_post(user_id: int, post_id: int):\n    return {\"user_id\": user_id, \"post_id\": post_id}\n</code></pre>"},{"location":"routing/#query-parameters","title":"Query Parameters","text":"<pre><code>@router.get(\"/posts\")\nasync def list_posts(\n    skip: int = 0,\n    limit: int = 10,\n    published: bool = True,\n    category: str = None\n):\n    return {\n        \"skip\": skip,\n        \"limit\": limit,\n        \"published\": published,\n        \"category\": category\n    }\n</code></pre>"},{"location":"routing/#request-body","title":"Request Body","text":"<pre><code>from pydantic import BaseModel\n\nclass PostCreate(BaseModel):\n    title: str\n    content: str\n    published: bool = False\n\n@router.post(\"/posts\")\nasync def create_post(post: PostCreate):\n    return {\"message\": \"Post created\", \"post\": post.dict()}\n</code></pre>"},{"location":"routing/#advanced-routing","title":"Advanced Routing","text":""},{"location":"routing/#router-prefixes","title":"Router Prefixes","text":"<pre><code># In blog/urls.py\nfrom fast_django.routers import APIRouter\n\nrouter = APIRouter(prefix=\"/api/v1\", tags=[\"blog\"])\n\n@router.get(\"/posts\")\nasync def list_posts():\n    return {\"posts\": []}\n</code></pre>"},{"location":"routing/#router-tags","title":"Router Tags","text":"<pre><code>router = APIRouter(tags=[\"posts\", \"public\"])\n\n@router.get(\"/posts\")\nasync def list_posts():\n    return {\"posts\": []}\n</code></pre>"},{"location":"routing/#dependencies","title":"Dependencies","text":"<pre><code>from fastapi import Depends, HTTPException\nfrom fast_django.orm import Model\n\nasync def get_current_user():\n    # Your authentication logic here\n    return {\"user_id\": 1, \"username\": \"john\"}\n\n@router.get(\"/posts\")\nasync def list_posts(user: dict = Depends(get_current_user)):\n    return {\"posts\": [], \"user\": user}\n</code></pre>"},{"location":"routing/#response-models","title":"Response Models","text":"<pre><code>from pydantic import BaseModel\n\nclass PostResponse(BaseModel):\n    id: int\n    title: str\n    content: str\n    created_at: datetime\n\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post(post_id: int):\n    return PostResponse(\n        id=post_id,\n        title=\"Sample Post\",\n        content=\"This is a sample post\",\n        created_at=datetime.now()\n    )\n</code></pre>"},{"location":"routing/#database-integration","title":"Database Integration","text":""},{"location":"routing/#using-models-in-routes","title":"Using Models in Routes","text":"<pre><code>from fast_django.orm import Model, fields\nfrom fast_django.routers import APIRouter\n\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    content = fields.TextField()\n    created_at = fields.DatetimeField(auto_now_add=True)\n\nrouter = APIRouter()\n\n@router.get(\"/posts\")\nasync def list_posts():\n    posts = await Post.all()\n    return [{\"id\": post.id, \"title\": post.title} for post in posts]\n\n@router.post(\"/posts\")\nasync def create_post(title: str, content: str):\n    post = await Post.create(title=title, content=content)\n    return {\"id\": post.id, \"title\": post.title}\n\n@router.get(\"/posts/{post_id}\")\nasync def get_post(post_id: int):\n    try:\n        post = await Post.get(id=post_id)\n        return {\"id\": post.id, \"title\": post.title, \"content\": post.content}\n    except DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n</code></pre>"},{"location":"routing/#error-handling","title":"Error Handling","text":""},{"location":"routing/#http-exceptions","title":"HTTP Exceptions","text":"<pre><code>from fastapi import HTTPException\n\n@router.get(\"/posts/{post_id}\")\nasync def get_post(post_id: int):\n    if post_id &lt; 1:\n        raise HTTPException(status_code=400, detail=\"Invalid post ID\")\n\n    # Your logic here\n    return {\"post_id\": post_id}\n</code></pre>"},{"location":"routing/#custom-exception-handlers","title":"Custom Exception Handlers","text":"<pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.exception_handler(ValueError)\nasync def value_error_handler(request: Request, exc: ValueError):\n    return JSONResponse(\n        status_code=400,\n        content={\"message\": str(exc)}\n    )\n</code></pre>"},{"location":"routing/#middleware-integration","title":"Middleware Integration","text":""},{"location":"routing/#cors-middleware","title":"CORS Middleware","text":"<pre><code>from fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"routing/#custom-middleware","title":"Custom Middleware","text":"<pre><code>from fastapi import Request\nimport time\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre>"},{"location":"routing/#app-structure","title":"App Structure","text":""},{"location":"routing/#project-level-routes","title":"Project-level Routes","text":"<pre><code># mysite/urls.py\nfrom fast_django.routers import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/\")\ndef root():\n    return {\"message\": \"Welcome to MySite\"}\n\n@router.get(\"/health\")\ndef health():\n    return {\"status\": \"healthy\"}\n</code></pre>"},{"location":"routing/#app-level-routes","title":"App-level Routes","text":"<pre><code># blog/urls.py\nfrom fast_django.routers import APIRouter\n\nrouter = APIRouter(prefix=\"/blog\", tags=[\"blog\"])\n\n@router.get(\"/posts\")\nasync def list_posts():\n    return {\"posts\": []}\n</code></pre>"},{"location":"routing/#url-configuration","title":"URL Configuration","text":""},{"location":"routing/#including-routers","title":"Including Routers","text":"<p>Routers are automatically included when apps are in <code>installed_apps</code>:</p> <pre><code># mysite/settings.py\nclass Settings(Settings):\n    installed_apps: list[str] = [\"mysite\", \"blog\"]\n</code></pre>"},{"location":"routing/#manual-router-inclusion","title":"Manual Router Inclusion","text":"<pre><code># mysite/asgi.py\nfrom fast_django import create_app\nfrom fast_django.routers import APIRouter\nfrom blog.routes import router as blog_router\n\napp = create_app(Settings())\napp.include_router(blog_router, prefix=\"/api\")\n</code></pre>"},{"location":"routing/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive route names that clearly indicate their purpose</li> <li>Group related routes using router prefixes and tags</li> <li>Validate input data using Pydantic models</li> <li>Handle errors gracefully with appropriate HTTP status codes</li> <li>Use async/await for database operations</li> <li>Document your API with proper docstrings and response models</li> <li>Keep routes focused - one responsibility per route</li> <li>Use dependency injection for shared functionality</li> </ol>"},{"location":"routing/#examples","title":"Examples","text":""},{"location":"routing/#complete-blog-api","title":"Complete Blog API","text":"<pre><code>from fast_django.routers import APIRouter\nfrom fast_django.orm import Model, fields\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\n# Models\nclass Post(Model):\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200)\n    content = fields.TextField()\n    published = fields.BooleanField(default=False)\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n# Pydantic models\nclass PostCreate(BaseModel):\n    title: str\n    content: str\n    published: bool = False\n\nclass PostResponse(BaseModel):\n    id: int\n    title: str\n    content: str\n    published: bool\n    created_at: datetime\n\n# Router\nrouter = APIRouter(prefix=\"/api/posts\", tags=[\"posts\"])\n\n@router.get(\"/\", response_model=List[PostResponse])\nasync def list_posts(skip: int = 0, limit: int = 10):\n    posts = await Post.all().offset(skip).limit(limit)\n    return [PostResponse.from_orm(post) for post in posts]\n\n@router.post(\"/\", response_model=PostResponse)\nasync def create_post(post: PostCreate):\n    db_post = await Post.create(**post.dict())\n    return PostResponse.from_orm(db_post)\n\n@router.get(\"/{post_id}\", response_model=PostResponse)\nasync def get_post(post_id: int):\n    post = await Post.get(id=post_id)\n    return PostResponse.from_orm(post)\n\n@router.put(\"/{post_id}\", response_model=PostResponse)\nasync def update_post(post_id: int, post: PostCreate):\n    db_post = await Post.get(id=post_id)\n    await db_post.update_from_dict(post.dict())\n    await db_post.save()\n    return PostResponse.from_orm(db_post)\n\n@router.delete(\"/{post_id}\")\nasync def delete_post(post_id: int):\n    post = await Post.get(id=post_id)\n    await post.delete()\n    return {\"message\": \"Post deleted\"}\n</code></pre>"},{"location":"scaffolding/","title":"Scaffolding","text":"<p>fast-django provides a comprehensive scaffolding system that generates project and app structures, similar to Django's <code>startproject</code> and <code>startapp</code> commands.</p>"},{"location":"scaffolding/#project-scaffolding","title":"Project Scaffolding","text":""},{"location":"scaffolding/#creating-a-new-project","title":"Creating a New Project","text":"<pre><code>fast-django startproject myproject\n</code></pre> <p>This command creates a complete project structure with all necessary files:</p> <pre><code>myproject/\n\u251c\u2500\u2500 manage.py              # CLI entry point\n\u251c\u2500\u2500 orm_config.py          # Database configuration\n\u251c\u2500\u2500 aerich.ini            # Migration configuration\n\u2514\u2500\u2500 myproject/            # Project package\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 asgi.py           # ASGI application\n    \u251c\u2500\u2500 settings.py       # Project settings\n    \u251c\u2500\u2500 urls.py           # Main routing\n    \u251c\u2500\u2500 models.py         # Project models\n    \u2514\u2500\u2500 admin.py          # Admin configuration\n</code></pre>"},{"location":"scaffolding/#generated-files","title":"Generated Files","text":""},{"location":"scaffolding/#managepy","title":"<code>manage.py</code>","text":"<p>The main CLI entry point:</p> <pre><code>#!/usr/bin/env python3\nfrom fast_django.cli.main import app\n\nif __name__ == \"__main__\":\n    app()\n</code></pre>"},{"location":"scaffolding/#asgipy","title":"<code>asgi.py</code>","text":"<p>ASGI application entry point:</p> <pre><code>from myproject.settings import Settings\nfrom fast_django import create_app\n\nsettings = Settings()\napp = create_app(settings)\n</code></pre>"},{"location":"scaffolding/#settingspy","title":"<code>settings.py</code>","text":"<p>Project configuration:</p> <pre><code>from fast_django.settings import Settings, OrmConfig\n\nclass Settings(Settings):\n    app_name: str = \"myproject\"\n    debug: bool = True\n    orm: OrmConfig = OrmConfig(models=[\"myproject.models\", \"aerich.models\"])\n    installed_apps: list[str] = [\"myproject\"]\n</code></pre>"},{"location":"scaffolding/#urlspy","title":"<code>urls.py</code>","text":"<p>Main routing configuration:</p> <pre><code>from fast_django.routers import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/\")\ndef root():\n    return {\"message\": \"Welcome to MyProject\"}\n\n@router.get(\"/health\")\ndef health():\n    return {\"status\": \"healthy\"}\n</code></pre>"},{"location":"scaffolding/#modelspy","title":"<code>models.py</code>","text":"<p>Project-level models:</p> <pre><code>from fast_django.orm import Model, fields\n\nclass Example(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100)\n</code></pre>"},{"location":"scaffolding/#adminpy","title":"<code>admin.py</code>","text":"<p>Admin configuration:</p> <pre><code>from fastapi import FastAPI\nfrom fast_django.admin import AdminSite\nfrom fast_django.settings import Settings\n\ndef init_admin(app: FastAPI, settings: Settings) -&gt; None:\n    site = AdminSite(title=\"Admin\")\n    site.mount(app, settings)\n</code></pre>"},{"location":"scaffolding/#app-scaffolding","title":"App Scaffolding","text":""},{"location":"scaffolding/#creating-a-new-app","title":"Creating a New App","text":"<pre><code>fast-django startapp myapp\n</code></pre> <p>This creates an app structure within your project:</p> <pre><code>myapp/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 models.py         # App models\n\u251c\u2500\u2500 routes.py         # API routes\n\u251c\u2500\u2500 views.py          # View functions\n\u251c\u2500\u2500 admin.py          # Admin configuration\n\u2514\u2500\u2500 migrations/       # Database migrations\n    \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"scaffolding/#generated-app-files","title":"Generated App Files","text":""},{"location":"scaffolding/#modelspy_1","title":"<code>models.py</code>","text":"<p>App models template:</p> <pre><code>from fast_django.orm import Model, fields\n\nclass Example(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100)\n</code></pre>"},{"location":"scaffolding/#routespy","title":"<code>routes.py</code>","text":"<p>API routes template:</p> <pre><code>from fast_django.routers import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/\")\ndef index():\n    return {\"message\": \"Hello from myapp\"}\n</code></pre>"},{"location":"scaffolding/#viewspy","title":"<code>views.py</code>","text":"<p>View functions template:</p> <pre><code>from fast_django.routers import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/health\")\ndef health():\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"scaffolding/#adminpy_1","title":"<code>admin.py</code>","text":"<p>Admin configuration template:</p> <pre><code>from fastapi import FastAPI\nfrom fast_django.admin import AdminSite\nfrom fast_django.settings import Settings\n\ndef init_admin(app: FastAPI, settings: Settings) -&gt; None:\n    site = AdminSite(title=\"MyApp Admin\")\n    site.mount(app, settings)\n</code></pre>"},{"location":"scaffolding/#customizing-scaffolding","title":"Customizing Scaffolding","text":""},{"location":"scaffolding/#project-templates","title":"Project Templates","text":"<p>You can customize the project scaffolding by modifying the templates in <code>src/fast_django/scaffolding/project/</code>:</p> <pre><code>scaffolding/\n\u2514\u2500\u2500 project/\n    \u251c\u2500\u2500 manage.py\n    \u2514\u2500\u2500 project_name/\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 asgi.py\n        \u251c\u2500\u2500 settings.py\n        \u251c\u2500\u2500 urls.py\n        \u251c\u2500\u2500 models.py\n        \u2514\u2500\u2500 admin.py\n</code></pre>"},{"location":"scaffolding/#app-templates","title":"App Templates","text":"<p>App templates are located in <code>src/fast_django/scaffolding/app/</code>:</p> <pre><code>scaffolding/\n\u2514\u2500\u2500 app/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 routes.py\n    \u251c\u2500\u2500 views.py\n    \u2514\u2500\u2500 admin.py\n</code></pre>"},{"location":"scaffolding/#template-variables","title":"Template Variables","text":"<p>Templates use <code>project_name</code> as a placeholder that gets replaced with the actual project name:</p> <pre><code># In template files\nclass Settings(Settings):\n    app_name: str = \"project_name\"\n\n# After generation\nclass Settings(Settings):\n    app_name: str = \"myproject\"\n</code></pre>"},{"location":"scaffolding/#advanced-usage","title":"Advanced Usage","text":""},{"location":"scaffolding/#custom-project-structure","title":"Custom Project Structure","text":"<p>You can create custom project templates by:</p> <ol> <li>Copying the default templates</li> <li>Modifying the structure</li> <li>Updating the CLI command to use your templates</li> </ol> <pre><code># Custom startproject command\n@app.command()\ndef startproject_custom(name: str) -&gt; None:\n    base = Path.cwd() / name\n    if base.exists():\n        typer.echo(f\"Directory {name} already exists\", err=True)\n        raise typer.Exit(1)\n\n    # Use custom template directory\n    template = Path(__file__).parent.parent / \"custom_scaffolding\" / \"project\"\n    copy_tree(template, base)\n\n    # Replace placeholders\n    pattern = re.compile(r\"project_name\")\n    for path in base.rglob(\"*.py\"):\n        content = path.read_text(encoding=\"utf-8\")\n        new_content = pattern.sub(name, content)\n        path.write_text(new_content, encoding=\"utf-8\")\n</code></pre>"},{"location":"scaffolding/#custom-app-structure","title":"Custom App Structure","text":"<p>Similarly, you can create custom app templates:</p> <pre><code>@app.command()\ndef startapp_custom(name: str) -&gt; None:\n    base = Path.cwd() / name\n    if base.exists():\n        typer.echo(f\"App {name} already exists\", err=True)\n        raise typer.Exit(1)\n\n    # Use custom app template\n    template = Path(__file__).parent.parent / \"custom_scaffolding\" / \"app\"\n    copy_tree(template, base)\n</code></pre>"},{"location":"scaffolding/#integration-with-settings","title":"Integration with Settings","text":""},{"location":"scaffolding/#auto-discovery","title":"Auto-Discovery","text":"<p>When you create an app, you need to add it to your project's <code>installed_apps</code>:</p> <pre><code># In myproject/settings.py\nclass Settings(Settings):\n    installed_apps: list[str] = [\"myproject\", \"myapp\"]\n    orm: OrmConfig = OrmConfig(\n        models=[\"myproject.models\", \"myapp.models\", \"aerich.models\"]\n    )\n</code></pre>"},{"location":"scaffolding/#database-configuration","title":"Database Configuration","text":"<p>The scaffolding system automatically generates <code>orm_config.py</code> for database configuration:</p> <pre><code># Generated orm_config.py\nORM = {\n    'connections': {'default': 'sqlite://db.sqlite3'},\n    'apps': {\n        'models': {\n            'models': ['myproject.models', 'myapp.models', 'aerich.models'],\n            'default_connection': 'default'\n        }\n    }\n}\n</code></pre>"},{"location":"scaffolding/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive names for projects and apps</li> <li>Follow naming conventions (lowercase, underscores)</li> <li>Add apps to installed_apps after creation</li> <li>Update ORM models list when adding new apps</li> <li>Customize templates for your organization's needs</li> <li>Version control your custom templates</li> <li>Document any custom scaffolding modifications</li> </ol>"},{"location":"scaffolding/#troubleshooting","title":"Troubleshooting","text":""},{"location":"scaffolding/#common-issues","title":"Common Issues","text":"<ol> <li>\"Directory already exists\"</li> <li>Choose a different name or remove the existing directory</li> <li> <p>Check for hidden files that might prevent creation</p> </li> <li> <p>\"Permission denied\"</p> </li> <li>Ensure you have write permissions in the target directory</li> <li> <p>Run with appropriate user permissions</p> </li> <li> <p>\"Template not found\"</p> </li> <li>Verify the scaffolding templates exist</li> <li> <p>Check the fast-django installation</p> </li> <li> <p>\"Import errors after generation\"</p> </li> <li>Ensure all dependencies are installed</li> <li>Check that the project structure is correct</li> </ol>"},{"location":"scaffolding/#debugging","title":"Debugging","text":"<pre><code># Check if fast-django is properly installed\npip show fast-django\n\n# Verify CLI commands work\nfast-django --help\n\n# Check template files exist\nls -la $(python -c \"import fast_django; print(fast_django.__file__)\")/../scaffolding/\n</code></pre>"},{"location":"scaffolding/#examples","title":"Examples","text":""},{"location":"scaffolding/#complete-project-setup","title":"Complete Project Setup","text":"<pre><code># Create project\nfast-django startproject myblog\ncd myblog\n\n# Create apps\nfast-django startapp blog\nfast-django startapp users\nfast-django startapp comments\n\n# Update settings\n# Edit myblog/settings.py to include new apps\n\n# Create migrations\npython manage.py makemigrations\n\n# Apply migrations\npython manage.py migrate\n\n# Start development server\npython manage.py runserver\n</code></pre>"},{"location":"scaffolding/#custom-app-template","title":"Custom App Template","text":"<p>Create a custom app template with additional files:</p> <pre><code>custom_scaffolding/\n\u2514\u2500\u2500 app/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 routes.py\n    \u251c\u2500\u2500 views.py\n    \u251c\u2500\u2500 admin.py\n    \u251c\u2500\u2500 serializers.py    # Custom file\n    \u251c\u2500\u2500 permissions.py    # Custom file\n    \u2514\u2500\u2500 tests.py          # Custom file\n</code></pre> <p>This allows you to generate apps with your organization's standard structure and files.</p>"},{"location":"settings/","title":"Settings","text":"<p>fast-django uses Pydantic Settings for configuration management, providing environment variable support with the <code>FD_</code> prefix and automatic <code>.env</code> file loading.</p>"},{"location":"settings/#basic-settings","title":"Basic Settings","text":""},{"location":"settings/#creating-a-settings-class","title":"Creating a Settings Class","text":"<pre><code>from fast_django.settings import Settings, OrmConfig\n\nclass MySettings(Settings):\n    app_name: str = \"myapp\"\n    debug: bool = False\n    secret_key: str = \"change-me\"\n    orm: OrmConfig = OrmConfig(models=[\"myapp.models\", \"aerich.models\"])\n</code></pre>"},{"location":"settings/#using-settings","title":"Using Settings","text":"<pre><code>from fast_django import create_app\nfrom myapp.settings import MySettings\n\nsettings = MySettings()\napp = create_app(settings)\n</code></pre>"},{"location":"settings/#configuration-options","title":"Configuration Options","text":""},{"location":"settings/#application-settings","title":"Application Settings","text":"<pre><code>class Settings(Settings):\n    # Application name\n    app_name: str = \"fast-django app\"\n\n    # Debug mode\n    debug: bool = False\n\n    # Secret key for security\n    secret_key: str = \"change-me\"\n\n    # Base directory (defaults to current working directory)\n    base_dir: Path = Field(default_factory=lambda: Path.cwd())\n\n    # Admin interface settings\n    admin_enabled: bool = True\n    admin_path: str = \"/admin\"\n</code></pre>"},{"location":"settings/#database-configuration","title":"Database Configuration","text":"<pre><code>from fast_django.settings import Settings, OrmConfig\n\nclass Settings(Settings):\n    orm: OrmConfig = OrmConfig(\n        # Database connections\n        connections={\n            \"default\": \"sqlite://db.sqlite3\",\n            \"readonly\": \"sqlite://readonly.db\",\n        },\n\n        # Model modules\n        models=[\"myapp.models\", \"aerich.models\"],\n\n        # App-specific configuration\n        apps={\n            \"models\": {\n                \"models\": [\"myapp.models\", \"aerich.models\"],\n                \"default_connection\": \"default\",\n            },\n            \"analytics\": {\n                \"models\": [\"analytics.models\"],\n                \"default_connection\": \"readonly\",\n            }\n        }\n    )\n</code></pre>"},{"location":"settings/#app-configuration","title":"App Configuration","text":"<pre><code>class Settings(Settings):\n    # Installed apps (for auto-discovery)\n    installed_apps: list[str] = [\"myapp\", \"blog\", \"users\"]\n\n    # Middleware (dotted paths)\n    middleware: list[str] = [\n        \"fastapi.middleware.cors.CORSMiddleware\",\n        \"fastapi.middleware.gzip.GZipMiddleware\",\n    ]\n</code></pre>"},{"location":"settings/#environment-variables","title":"Environment Variables","text":""},{"location":"settings/#basic-environment-variables","title":"Basic Environment Variables","text":"<pre><code># .env file\nFD_APP_NAME=\"My Awesome App\"\nFD_DEBUG=true\nFD_SECRET_KEY=\"your-secret-key-here\"\nFD_ADMIN_ENABLED=true\nFD_ADMIN_PATH=\"/admin\"\n</code></pre>"},{"location":"settings/#database-environment-variables","title":"Database Environment Variables","text":"<pre><code># Database configuration\nFD_ORM_CONNECTIONS_DEFAULT=sqlite://db.sqlite3\nFD_ORM_CONNECTIONS_READONLY=postgres://user:pass@localhost/readonly\n\n# Model modules\nFD_ORM_MODELS_0=myapp.models\nFD_ORM_MODELS_1=blog.models\nFD_ORM_MODELS_2=aerich.models\n</code></pre>"},{"location":"settings/#app-configuration-environment-variables","title":"App Configuration Environment Variables","text":"<pre><code># Installed apps\nFD_INSTALLED_APPS_0=myapp\nFD_INSTALLED_APPS_1=blog\nFD_INSTALLED_APPS_2=users\n\n# Middleware\nFD_MIDDLEWARE_0=fastapi.middleware.cors.CORSMiddleware\nFD_MIDDLEWARE_1=fastapi.middleware.gzip.GZipMiddleware\n</code></pre>"},{"location":"settings/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"settings/#custom-settings-classes","title":"Custom Settings Classes","text":"<pre><code>from fast_django.settings import Settings, OrmConfig\nfrom typing import List, Optional\n\nclass ProductionSettings(Settings):\n    app_name: str = \"Production App\"\n    debug: bool = False\n    secret_key: str = \"production-secret-key\"\n\n    # Production database\n    orm: OrmConfig = OrmConfig(\n        connections={\n            \"default\": \"postgres://user:pass@prod-db:5432/myapp\",\n        },\n        models=[\"myapp.models\", \"aerich.models\"]\n    )\n\n    # Production middleware\n    middleware: List[str] = [\n        \"fastapi.middleware.cors.CORSMiddleware\",\n        \"fastapi.middleware.gzip.GZipMiddleware\",\n        \"myapp.middleware.SecurityMiddleware\",\n    ]\n\nclass DevelopmentSettings(Settings):\n    app_name: str = \"Development App\"\n    debug: bool = True\n    secret_key: str = \"dev-secret-key\"\n\n    # Development database\n    orm: OrmConfig = OrmConfig(\n        connections={\n            \"default\": \"sqlite://dev.db\",\n        },\n        models=[\"myapp.models\", \"aerich.models\"]\n    )\n\nclass TestSettings(Settings):\n    app_name: str = \"Test App\"\n    debug: bool = True\n    secret_key: str = \"test-secret-key\"\n\n    # Test database\n    orm: OrmConfig = OrmConfig(\n        connections={\n            \"default\": \"sqlite://:memory:\",\n        },\n        models=[\"myapp.models\", \"aerich.models\"]\n    )\n</code></pre>"},{"location":"settings/#environment-based-settings","title":"Environment-based Settings","text":"<pre><code>import os\nfrom fast_django.settings import Settings, OrmConfig\n\ndef get_settings():\n    env = os.getenv(\"ENVIRONMENT\", \"development\")\n\n    if env == \"production\":\n        return ProductionSettings()\n    elif env == \"test\":\n        return TestSettings()\n    else:\n        return DevelopmentSettings()\n\n# Usage\nsettings = get_settings()\napp = create_app(settings)\n</code></pre>"},{"location":"settings/#custom-field-types","title":"Custom Field Types","text":"<pre><code>from fast_django.settings import Settings\nfrom typing import List, Dict, Any\nfrom pathlib import Path\n\nclass MySettings(Settings):\n    # Custom list field\n    allowed_hosts: List[str] = [\"localhost\", \"127.0.0.1\"]\n\n    # Custom dict field\n    cache_config: Dict[str, Any] = {\n        \"backend\": \"redis\",\n        \"host\": \"localhost\",\n        \"port\": 6379,\n    }\n\n    # Custom path field\n    static_files_dir: Path = Path(\"static\")\n\n    # Custom validation\n    def model_post_init(self, __context: Any) -&gt; None:\n        if self.debug and self.secret_key == \"change-me\":\n            raise ValueError(\"Must set a secure secret key in production\")\n</code></pre>"},{"location":"settings/#database-configuration_1","title":"Database Configuration","text":""},{"location":"settings/#multiple-databases","title":"Multiple Databases","text":"<pre><code>class Settings(Settings):\n    orm: OrmConfig = OrmConfig(\n        connections={\n            \"default\": \"postgres://user:pass@localhost/main\",\n            \"analytics\": \"postgres://user:pass@localhost/analytics\",\n            \"cache\": \"redis://localhost:6379/0\",\n        },\n        apps={\n            \"models\": {\n                \"models\": [\"myapp.models\", \"aerich.models\"],\n                \"default_connection\": \"default\",\n            },\n            \"analytics\": {\n                \"models\": [\"analytics.models\"],\n                \"default_connection\": \"analytics\",\n            },\n            \"cache\": {\n                \"models\": [\"cache.models\"],\n                \"default_connection\": \"cache\",\n            }\n        }\n    )\n</code></pre>"},{"location":"settings/#database-url-examples","title":"Database URL Examples","text":"<pre><code># SQLite\n\"sqlite://db.sqlite3\"\n\"sqlite://:memory:\"\n\n# PostgreSQL\n\"postgres://user:password@localhost:5432/dbname\"\n\"postgres://user:password@localhost:5432/dbname?sslmode=require\"\n\n# MySQL\n\"mysql://user:password@localhost:3306/dbname\"\n\n# Redis\n\"redis://localhost:6379/0\"\n\"redis://user:password@localhost:6379/0\"\n</code></pre>"},{"location":"settings/#middleware-configuration","title":"Middleware Configuration","text":""},{"location":"settings/#built-in-middleware","title":"Built-in Middleware","text":"<pre><code>class Settings(Settings):\n    middleware: List[str] = [\n        # CORS middleware\n        \"fastapi.middleware.cors.CORSMiddleware\",\n\n        # GZip compression\n        \"fastapi.middleware.gzip.GZipMiddleware\",\n\n        # Trusted host middleware\n        \"fastapi.middleware.trustedhost.TrustedHostMiddleware\",\n\n        # HTTPS redirect (production)\n        \"fastapi.middleware.httpsredirect.HTTPSRedirectMiddleware\",\n    ]\n</code></pre>"},{"location":"settings/#custom-middleware","title":"Custom Middleware","text":"<pre><code># myapp/middleware.py\nfrom fastapi import Request, Response\nimport time\n\nclass TimingMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\":\n            await self.app(scope, receive, send)\n            return\n\n        start_time = time.time()\n\n        async def send_wrapper(message):\n            if message[\"type\"] == \"http.response.start\":\n                process_time = time.time() - start_time\n                message[\"headers\"].append([b\"x-process-time\", str(process_time).encode()])\n            await send(message)\n\n        await self.app(scope, receive, send_wrapper)\n\n# In settings.py\nclass Settings(Settings):\n    middleware: List[str] = [\n        \"myapp.middleware.TimingMiddleware\",\n    ]\n</code></pre>"},{"location":"settings/#validation-and-error-handling","title":"Validation and Error Handling","text":""},{"location":"settings/#custom-validation","title":"Custom Validation","text":"<pre><code>from fast_django.settings import Settings\nfrom pydantic import validator\n\nclass Settings(Settings):\n    app_name: str = \"myapp\"\n    debug: bool = False\n    secret_key: str = \"change-me\"\n\n    @validator('secret_key')\n    def validate_secret_key(cls, v, values):\n        if not values.get('debug') and v == \"change-me\":\n            raise ValueError(\"Must set a secure secret key in production\")\n        return v\n\n    @validator('app_name')\n    def validate_app_name(cls, v):\n        if not v or len(v.strip()) == 0:\n            raise ValueError(\"App name cannot be empty\")\n        return v.strip()\n</code></pre>"},{"location":"settings/#settings-validation","title":"Settings Validation","text":"<pre><code>from fast_django.settings import Settings\n\ntry:\n    settings = Settings()\n    print(\"Settings loaded successfully\")\nexcept ValidationError as e:\n    print(f\"Settings validation failed: {e}\")\n</code></pre>"},{"location":"settings/#best-practices","title":"Best Practices","text":"<ol> <li>Use environment variables for configuration that changes between environments</li> <li>Set secure defaults for production settings</li> <li>Validate sensitive settings like secret keys</li> <li>Use different settings classes for different environments</li> <li>Document your settings with clear field descriptions</li> <li>Use type hints for better IDE support and validation</li> <li>Keep secrets out of code - use environment variables or secret management</li> <li>Test your settings with different environment configurations</li> </ol>"},{"location":"settings/#troubleshooting","title":"Troubleshooting","text":""},{"location":"settings/#common-issues","title":"Common Issues","text":"<ol> <li>\"Settings validation failed\"</li> <li>Check that all required fields have values</li> <li>Verify environment variable names use <code>FD_</code> prefix</li> <li> <p>Check for type mismatches</p> </li> <li> <p>\"Database connection failed\"</p> </li> <li>Verify database URL format</li> <li>Check that database server is running</li> <li> <p>Verify credentials and permissions</p> </li> <li> <p>\"Module not found\"</p> </li> <li>Check that model modules are correctly specified</li> <li>Verify import paths are correct</li> <li>Ensure modules are in Python path</li> </ol>"},{"location":"settings/#debugging-settings","title":"Debugging Settings","text":"<pre><code># Print all settings\nsettings = Settings()\nprint(settings.dict())\n\n# Print specific setting\nprint(f\"Debug mode: {settings.debug}\")\nprint(f\"Database URL: {settings.orm.connections['default']}\")\n</code></pre>"},{"location":"signals/","title":"Signals","text":"<p>fast-django includes Django-like signals for request lifecycle and ORM events.</p>"},{"location":"signals/#request-signals","title":"Request signals","text":"<p>Dispatched by built-in <code>SignalsMiddleware</code> (enabled by default via <code>create_app</code>):</p> <ul> <li><code>request_started(sender, scope)</code></li> <li><code>request_finished(sender, scope, message)</code></li> <li><code>got_request_exception(sender, scope, exception)</code></li> </ul> <p>Receivers can be sync or async.</p> <p>Example:</p> <pre><code>from fast_django.signals import request_started, request_finished\n\nasync def on_started(sender, scope, **_):\n    ...\n\ndef on_finished(sender, scope, message, **_):\n    ...\n\nrequest_started.connect(on_started)\nrequest_finished.connect(on_finished)\n</code></pre>"},{"location":"signals/#orm-signals","title":"ORM signals","text":"<p>Patched onto Tortoise <code>Model.save()</code> / <code>Model.delete()</code> at import time:</p> <ul> <li><code>pre_save(sender, instance, created)</code></li> <li><code>post_save(sender, instance, created)</code></li> <li><code>pre_delete(sender, instance)</code></li> <li><code>post_delete(sender, instance)</code></li> </ul> <p><code>created</code> is inferred by checking if <code>instance.pk</code> is <code>None</code> before save.</p> <p>Example:</p> <pre><code>from fast_django.signals import post_save\n\nasync def on_post_save(sender, instance, created, **_):\n    if created:\n        print(\"created:\", instance)\n\npost_save.connect(on_post_save)\n</code></pre>"},{"location":"signals/#notes","title":"Notes","text":"<ul> <li>Custom middleware in <code>Settings.middleware</code> is added after the built-in <code>SignalsMiddleware</code>.</li> <li>Receivers should be lightweight; offload heavy work to background tasks.</li> </ul>"},{"location":"api/cli/","title":"CLI API Reference","text":"<p>This page provides detailed API documentation for fast-django's command-line interface.</p>"},{"location":"api/cli/#main-cli-app","title":"Main CLI App","text":""},{"location":"api/cli/#app","title":"<code>app</code>","text":"<pre><code>app = typer.Typer(help=\"fast-django CLI\")\n</code></pre> <p>Main Typer CLI application instance.</p>"},{"location":"api/cli/#commands","title":"Commands","text":""},{"location":"api/cli/#startproject","title":"<code>startproject</code>","text":"<pre><code>@app.command()\ndef startproject(name: str) -&gt; None\n</code></pre> <p>Creates a new fast-django project.</p> <p>Parameters: - <code>name</code> (str): Project name.</p> <p>What it creates: - Project directory structure - <code>manage.py</code> script - <code>asgi.py</code> ASGI application - <code>settings.py</code> configuration - <code>orm_config.py</code> database config - <code>aerich.ini</code> migration config</p> <p>Example:</p> <pre><code>fast-django startproject myapp\n</code></pre>"},{"location":"api/cli/#startapp","title":"<code>startapp</code>","text":"<pre><code>@app.command()\ndef startapp(name: str) -&gt; None\n</code></pre> <p>Creates a new app within the current project.</p> <p>Parameters: - <code>name</code> (str): App name.</p> <p>What it creates: - App directory structure - <code>models.py</code> for database models - <code>routes.py</code> for API routes - <code>views.py</code> for view functions - <code>admin.py</code> for admin config - <code>migrations/</code> directory</p> <p>Example:</p> <pre><code>fast-django startapp blog\n</code></pre>"},{"location":"api/cli/#runserver","title":"<code>runserver</code>","text":"<pre><code>@app.command()\ndef runserver(\n    host: str = \"127.0.0.1\",\n    port: int = 8000,\n    reload: bool = True\n) -&gt; None\n</code></pre> <p>Starts the development server.</p> <p>Parameters: - <code>host</code> (str): Host to bind to. Default: \"127.0.0.1\" - <code>port</code> (int): Port to bind to. Default: 8000 - <code>reload</code> (bool): Enable auto-reload. Default: True</p> <p>Example:</p> <pre><code>fast-django runserver --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"api/cli/#makemigrations","title":"<code>makemigrations</code>","text":"<pre><code>@app.command()\ndef makemigrations(\n    app_name: str | None = typer.Option(None, help=\"Limit migrations to given app directory\")\n) -&gt; None\n</code></pre> <p>Creates database migrations.</p> <p>Parameters: - <code>app_name</code> (str, optional): Specific app to migrate.</p> <p>Features: - Auto-discovers apps with <code>models.py</code> - Generates <code>orm_config.py</code> if missing - Creates migration files in app directories - Uses Aerich for migration generation</p> <p>Example:</p> <pre><code>fast-django makemigrations\nfast-django makemigrations --app blog\n</code></pre>"},{"location":"api/cli/#migrate","title":"<code>migrate</code>","text":"<pre><code>@app.command()\ndef migrate() -&gt; None\n</code></pre> <p>Applies pending database migrations.</p> <p>What it does: - Applies all pending migrations - Updates database schema - Uses Aerich for execution</p> <p>Example:</p> <pre><code>fast-django migrate\n</code></pre>"},{"location":"api/cli/#shell","title":"<code>shell</code>","text":"<pre><code>@app.command()\ndef shell() -&gt; None\n</code></pre> <p>Opens an interactive Python shell.</p> <p>Features: - Uses IPython if available - Pre-loads project context - Useful for debugging</p> <p>Example:</p> <pre><code>fast-django shell\n</code></pre>"},{"location":"api/cli/#createsuperuser","title":"<code>createsuperuser</code>","text":"<pre><code>@app.command()\ndef createsuperuser(\n    email: str = typer.Option(...),\n    password: str = typer.Option(..., prompt=True, hide_input=True),\n    models: str | None = typer.Option(None, help=\"Dotted path to app models module\")\n) -&gt; None\n</code></pre> <p>Creates a superuser account.</p> <p>Parameters: - <code>email</code> (str): Email address (required). - <code>password</code> (str): Password (prompted if not provided). - <code>models</code> (str, optional): Models module path.</p> <p>Auto-discovery: - Finds User models in project - Searches for <code>User</code> class in app models - Uses <code>FD_APP_MODELS</code> environment variable</p> <p>Example:</p> <pre><code>fast-django createsuperuser --email admin@example.com\n</code></pre>"},{"location":"api/cli/#utility-functions","title":"Utility Functions","text":""},{"location":"api/cli/#_write_aerich_ini","title":"<code>_write_aerich_ini</code>","text":"<pre><code>def _write_aerich_ini(location: Path) -&gt; None\n</code></pre> <p>Writes Aerich configuration file.</p> <p>Parameters: - <code>location</code> (Path): Directory for migrations.</p>"},{"location":"api/cli/#copy_tree","title":"<code>copy_tree</code>","text":"<pre><code>def copy_tree(src: Path, dst: Path) -&gt; None\n</code></pre> <p>Copies directory tree recursively.</p> <p>Parameters: - <code>src</code> (Path): Source directory. - <code>dst</code> (Path): Destination directory.</p>"},{"location":"api/cli/#environment-variables","title":"Environment Variables","text":""},{"location":"api/cli/#fd_test_mode","title":"<code>FD_TEST_MODE</code>","text":"<pre><code>FD_TEST_MODE=1\n</code></pre> <p>Enables test mode for CLI commands.</p>"},{"location":"api/cli/#fd_app_models","title":"<code>FD_APP_MODELS</code>","text":"<pre><code>FD_APP_MODELS=myapp.models\n</code></pre> <p>Specifies models module for createsuperuser.</p>"},{"location":"api/cli/#pytest_current_test","title":"<code>PYTEST_CURRENT_TEST</code>","text":"<pre><code>PYTEST_CURRENT_TEST=test_function\n</code></pre> <p>Automatically detected for test mode.</p>"},{"location":"api/cli/#error-handling","title":"Error Handling","text":""},{"location":"api/cli/#common-exceptions","title":"Common Exceptions","text":""},{"location":"api/cli/#typerexit1","title":"<code>typer.Exit(1)</code>","text":"<p>Raised when: - Directory already exists - Project directory not found - Invalid configuration</p>"},{"location":"api/cli/#subprocesscalledprocesserror","title":"<code>subprocess.CalledProcessError</code>","text":"<p>Raised when: - External command fails - Database connection error - Migration errors</p>"},{"location":"api/cli/#examples","title":"Examples","text":""},{"location":"api/cli/#complete-project-setup","title":"Complete Project Setup","text":"<pre><code># Create project\nfast-django startproject myblog\ncd myblog\n\n# Create apps\nfast-django startapp blog\nfast-django startapp users\n\n# Database setup\nfast-django makemigrations\nfast-django migrate\n\n# Create superuser\nfast-django createsuperuser --email admin@example.com\n\n# Start development\nfast-django runserver\n</code></pre>"},{"location":"api/cli/#development-workflow","title":"Development Workflow","text":"<pre><code># Make model changes\n# Edit models.py files\n\n# Create migrations\nfast-django makemigrations --app blog\n\n# Apply migrations\nfast-django migrate\n\n# Test in shell\nfast-django shell\n\n# Run server\nfast-django runserver --reload\n</code></pre>"},{"location":"api/cli/#production-commands","title":"Production Commands","text":"<pre><code># Disable reload for production\nfast-django runserver --no-reload --host 0.0.0.0 --port 80\n\n# Create migrations for specific app\nfast-django makemigrations --app users\n\n# Apply all migrations\nfast-django migrate\n</code></pre>"},{"location":"api/cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/cli/#common-issues","title":"Common Issues","text":"<ol> <li>\"Directory already exists\"</li> <li>Choose different name</li> <li> <p>Remove existing directory</p> </li> <li> <p>\"Run inside a project directory\"</p> </li> <li>Ensure <code>pyproject.toml</code> exists</li> <li> <p>Run from project root</p> </li> <li> <p>\"No User model found\"</p> </li> <li>Create User model in app</li> <li> <p>Set <code>FD_APP_MODELS</code> environment variable</p> </li> <li> <p>\"Migration errors\"</p> </li> <li>Check model imports</li> <li>Verify <code>orm_config.py</code> is up to date</li> <li>Try recreating migrations</li> </ol>"},{"location":"api/cli/#debug-commands","title":"Debug Commands","text":"<pre><code># Show help\nfast-django --help\nfast-django runserver --help\n\n# Check project structure\nls -la\ncat pyproject.toml\n\n# Verify database config\ncat orm_config.py\ncat aerich.ini\n</code></pre>"},{"location":"api/core/","title":"Core API Reference","text":"<p>This page provides detailed API documentation for fast-django's core components.</p>"},{"location":"api/core/#application-factory","title":"Application Factory","text":""},{"location":"api/core/#create_app","title":"<code>create_app</code>","text":"<pre><code>def create_app(settings: Settings | None = None) -&gt; FastAPI\n</code></pre> <p>Creates and configures a FastAPI application with fast-django features.</p> <p>Parameters: - <code>settings</code> (Settings, optional): Configuration settings. If None, uses default Settings.</p> <p>Returns: - <code>FastAPI</code>: Configured FastAPI application instance.</p> <p>Example:</p> <pre><code>from fast_django import create_app, Settings\n\n# Using default settings\napp = create_app()\n\n# Using custom settings\nsettings = Settings(app_name=\"My App\", debug=True)\napp = create_app(settings)\n</code></pre>"},{"location":"api/core/#built-ins","title":"Built-ins","text":"<p><code>create_app</code> automatically adds <code>fast_django.signals.SignalsMiddleware</code> to emit request lifecycle signals. Custom middleware listed in <code>Settings.middleware</code> is applied after this built-in middleware.</p>"},{"location":"api/core/#settings","title":"Settings","text":""},{"location":"api/core/#settings_1","title":"<code>Settings</code>","text":"<pre><code>class Settings(BaseSettings):\n    app_name: str = \"fast-django app\"\n    debug: bool = False\n    secret_key: str = \"change-me\"\n    base_dir: Path = Field(default_factory=lambda: Path.cwd())\n    admin_enabled: bool = True\n    admin_path: str = \"/admin\"\n    orm: OrmConfig = Field(default_factory=OrmConfig)\n    installed_apps: list[str] = Field(default_factory=list)\n    middleware: list[str] = Field(default_factory=list)\n</code></pre> <p>Base settings class using Pydantic Settings.</p> <p>Fields: - <code>app_name</code> (str): Application name for FastAPI title. - <code>debug</code> (bool): Debug mode flag. - <code>secret_key</code> (str): Secret key for security. - <code>base_dir</code> (Path): Base directory path. - <code>admin_enabled</code> (bool): Enable admin interface. - <code>admin_path</code> (str): Admin interface mount path. - <code>orm</code> (OrmConfig): Database configuration. - <code>installed_apps</code> (list[str]): List of installed app names. - <code>middleware</code> (list[str]): List of middleware dotted paths.</p>"},{"location":"api/core/#ormconfig","title":"<code>OrmConfig</code>","text":"<pre><code>class OrmConfig(BaseModel):\n    models: list[str] = Field(default_factory=lambda: [\"aerich.models\"])\n    connections: dict[str, str] = Field(default_factory=lambda: {\"default\": \"sqlite://db.sqlite3\"})\n    apps: dict[str, dict[str, Any]] = Field(default_factory=dict)\n</code></pre> <p>Database configuration for Tortoise ORM.</p> <p>Fields: - <code>models</code> (list[str]): List of model module paths. - <code>connections</code> (dict[str, str]): Database connection URLs. - <code>apps</code> (dict[str, dict[str, Any]]): App-specific ORM configuration.</p>"},{"location":"api/core/#database","title":"Database","text":""},{"location":"api/core/#init_db","title":"<code>init_db</code>","text":"<pre><code>def init_db(app: FastAPI, settings: Settings) -&gt; None\n</code></pre> <p>Initializes database connections and ORM.</p> <p>Parameters: - <code>app</code> (FastAPI): FastAPI application instance. - <code>settings</code> (Settings): Application settings.</p>"},{"location":"api/core/#build_tortoise_config","title":"<code>build_tortoise_config</code>","text":"<pre><code>def build_tortoise_config(settings: Settings) -&gt; dict[str, Any]\n</code></pre> <p>Builds Tortoise ORM configuration from settings.</p> <p>Parameters: - <code>settings</code> (Settings): Application settings.</p> <p>Returns: - <code>dict[str, Any]</code>: Tortoise ORM configuration dictionary.</p>"},{"location":"api/core/#apps","title":"Apps","text":""},{"location":"api/core/#include_app_routers","title":"<code>include_app_routers</code>","text":"<pre><code>def include_app_routers(app: FastAPI, app_names: list[str]) -&gt; None\n</code></pre> <p>Automatically includes routers from installed apps.</p> <p>Parameters: - <code>app</code> (FastAPI): FastAPI application instance. - <code>app_names</code> (list[str]): List of app names to include.</p> <p>Discovery Order: 1. <code>{app_name}.urls</code> 2. <code>{app_name}.routes</code> 3. <code>{app_name}.api</code> 4. <code>{app_name}.views</code></p>"},{"location":"api/core/#admin","title":"Admin","text":""},{"location":"api/core/#adminsite","title":"<code>AdminSite</code>","text":"<pre><code>class AdminSite:\n    def __init__(self, title: str = \"Admin\") -&gt; None\n    def mount(self, app: FastAPI, settings: Settings, path: Optional[str] = None) -&gt; None\n    def register_model(self, model: Type[Model]) -&gt; None\n</code></pre> <p>Admin interface facade for mounting and model registration.</p> <p>Methods: - <code>__init__(title)</code>: Initialize admin site with title. - <code>mount(app, settings, path)</code>: Mount admin interface to FastAPI app. - <code>register_model(model)</code>: Register a model for admin interface.</p>"},{"location":"api/core/#try_call_admin_hooks","title":"<code>try_call_admin_hooks</code>","text":"<pre><code>def try_call_admin_hooks(app: FastAPI, settings: Settings) -&gt; None\n</code></pre> <p>Calls admin initialization hooks from installed apps.</p> <p>Parameters: - <code>app</code> (FastAPI): FastAPI application instance. - <code>settings</code> (Settings): Application settings.</p> <p>Hook Function:</p> <pre><code>def init_admin(app: FastAPI, settings: Settings) -&gt; None:\n    # Your admin configuration\n    pass\n</code></pre>"},{"location":"api/core/#utilities","title":"Utilities","text":""},{"location":"api/core/#discover_models_modules","title":"<code>discover_models_modules</code>","text":"<pre><code>def discover_models_modules(start_dir: Path | None = None) -&gt; list[str]\n</code></pre> <p>Discovers model modules in a directory.</p> <p>Parameters: - <code>start_dir</code> (Path, optional): Directory to search. Defaults to current directory.</p> <p>Returns: - <code>list[str]</code>: List of discovered model module paths.</p> <p>Example:</p> <pre><code>from fast_django.utils import discover_models_modules\n\n# Discover models in current directory\nmodels = discover_models_modules()\n# Returns: ['app1.models', 'app2.models', 'aerich.models']\n\n# Discover models in specific directory\nmodels = discover_models_modules(Path('/path/to/project'))\n</code></pre>"},{"location":"api/orm/","title":"ORM API Reference","text":"<p>This page provides detailed API documentation for fast-django's ORM components, which are re-exported from Tortoise ORM.</p>"},{"location":"api/orm/#models","title":"Models","text":""},{"location":"api/orm/#model","title":"<code>Model</code>","text":"<pre><code>class Model:\n    # Base model class for all database models\n</code></pre> <p>Base model class for defining database models.</p> <p>Example:</p> <pre><code>from fast_django.orm import Model, fields\n\nclass User(Model):\n    id = fields.IntField(pk=True)\n    username = fields.CharField(max_length=50)\n    email = fields.CharField(max_length=100)\n</code></pre>"},{"location":"api/orm/#fields","title":"Fields","text":""},{"location":"api/orm/#field-types","title":"Field Types","text":""},{"location":"api/orm/#intfield","title":"<code>IntField</code>","text":"<pre><code>IntField(pk: bool = False, null: bool = False, default: Any = None, unique: bool = False, index: bool = False, description: str = None)\n</code></pre> <p>Integer field for storing whole numbers.</p> <p>Parameters: - <code>pk</code> (bool): Primary key field. - <code>null</code> (bool): Allow NULL values. - <code>default</code> (Any): Default value. - <code>unique</code> (bool): Unique constraint. - <code>index</code> (bool): Create database index. - <code>description</code> (str): Field description.</p>"},{"location":"api/orm/#charfield","title":"<code>CharField</code>","text":"<pre><code>CharField(max_length: int, null: bool = False, default: Any = None, unique: bool = False, index: bool = False, description: str = None)\n</code></pre> <p>Character field for storing strings with maximum length.</p> <p>Parameters: - <code>max_length</code> (int): Maximum string length. - <code>null</code> (bool): Allow NULL values. - <code>default</code> (Any): Default value. - <code>unique</code> (bool): Unique constraint. - <code>index</code> (bool): Create database index. - <code>description</code> (str): Field description.</p>"},{"location":"api/orm/#textfield","title":"<code>TextField</code>","text":"<pre><code>TextField(null: bool = False, default: Any = None, description: str = None)\n</code></pre> <p>Text field for storing long text content.</p> <p>Parameters: - <code>null</code> (bool): Allow NULL values. - <code>default</code> (Any): Default value. - <code>description</code> (str): Field description.</p>"},{"location":"api/orm/#booleanfield","title":"<code>BooleanField</code>","text":"<pre><code>BooleanField(null: bool = False, default: bool = False, description: str = None)\n</code></pre> <p>Boolean field for storing true/false values.</p> <p>Parameters: - <code>null</code> (bool): Allow NULL values. - <code>default</code> (bool): Default value. - <code>description</code> (str): Field description.</p>"},{"location":"api/orm/#datetimefield","title":"<code>DateTimeField</code>","text":"<pre><code>DateTimeField(null: bool = False, default: Any = None, auto_now: bool = False, auto_now_add: bool = False, description: str = None)\n</code></pre> <p>DateTime field for storing date and time values.</p> <p>Parameters: - <code>null</code> (bool): Allow NULL values. - <code>default</code> (Any): Default value. - <code>auto_now</code> (bool): Update on every save. - <code>auto_now_add</code> (bool): Set on creation only. - <code>description</code> (str): Field description.</p>"},{"location":"api/orm/#foreignkeyfield","title":"<code>ForeignKeyField</code>","text":"<pre><code>ForeignKeyField(model_name: str, related_name: str = None, null: bool = False, on_delete: str = \"CASCADE\", description: str = None)\n</code></pre> <p>Foreign key field for model relationships.</p> <p>Parameters: - <code>model_name</code> (str): Related model name. - <code>related_name</code> (str): Reverse relationship name. - <code>null</code> (bool): Allow NULL values. - <code>on_delete</code> (str): On delete behavior. - <code>description</code> (str): Field description.</p>"},{"location":"api/orm/#manytomanyfield","title":"<code>ManyToManyField</code>","text":"<pre><code>ManyToManyField(model_name: str, related_name: str = None, through: str = None, description: str = None)\n</code></pre> <p>Many-to-many field for model relationships.</p> <p>Parameters: - <code>model_name</code> (str): Related model name. - <code>related_name</code> (str): Reverse relationship name. - <code>through</code> (str): Through model name. - <code>description</code> (str): Field description.</p>"},{"location":"api/orm/#database-operations","title":"Database Operations","text":""},{"location":"api/orm/#tortoise","title":"<code>Tortoise</code>","text":"<pre><code>class Tortoise:\n    @staticmethod\n    async def init(config: dict, generate_schemas: bool = False) -&gt; None\n    @staticmethod\n    async def close_connections() -&gt; None\n    @staticmethod\n    def get_connection(connection_name: str = \"default\") -&gt; BaseDBAsyncClient\n</code></pre> <p>Tortoise ORM main class for database management.</p> <p>Methods: - <code>init(config)</code>: Initialize database connections. - <code>close_connections()</code>: Close all database connections. - <code>get_connection(name)</code>: Get database connection.</p>"},{"location":"api/orm/#run_async","title":"<code>run_async</code>","text":"<pre><code>def run_async(coroutine: Coroutine) -&gt; Any\n</code></pre> <p>Run async coroutine in sync context.</p> <p>Parameters: - <code>coroutine</code> (Coroutine): Async coroutine to run.</p> <p>Returns: - <code>Any</code>: Coroutine result.</p>"},{"location":"api/orm/#query-operations","title":"Query Operations","text":""},{"location":"api/orm/#model-methods","title":"Model Methods","text":""},{"location":"api/orm/#all","title":"<code>all()</code>","text":"<pre><code>async def all() -&gt; QuerySet\n</code></pre> <p>Get all model instances.</p> <p>Returns: - <code>QuerySet</code>: Query set for all instances.</p>"},{"location":"api/orm/#getkwargs","title":"<code>get(**kwargs)</code>","text":"<pre><code>async def get(**kwargs) -&gt; Model\n</code></pre> <p>Get single model instance by filters.</p> <p>Parameters: - <code>**kwargs</code>: Field filters.</p> <p>Returns: - <code>Model</code>: Model instance.</p> <p>Raises: - <code>DoesNotExist</code>: If no instance found.</p>"},{"location":"api/orm/#filterkwargs","title":"<code>filter(**kwargs)</code>","text":"<pre><code>def filter(**kwargs) -&gt; QuerySet\n</code></pre> <p>Filter model instances by field values.</p> <p>Parameters: - <code>**kwargs</code>: Field filters.</p> <p>Returns: - <code>QuerySet</code>: Filtered query set.</p>"},{"location":"api/orm/#createkwargs","title":"<code>create(**kwargs)</code>","text":"<pre><code>async def create(**kwargs) -&gt; Model\n</code></pre> <p>Create new model instance.</p> <p>Parameters: - <code>**kwargs</code>: Field values.</p> <p>Returns: - <code>Model</code>: Created model instance.</p>"},{"location":"api/orm/#bulk_createobjects-listmodel","title":"<code>bulk_create(objects: list[Model])</code>","text":"<pre><code>async def bulk_create(objects: list[Model]) -&gt; list[Model]\n</code></pre> <p>Create multiple model instances efficiently.</p> <p>Parameters: - <code>objects</code> (list[Model]): List of model instances.</p> <p>Returns: - <code>list[Model]</code>: Created model instances.</p>"},{"location":"api/orm/#queryset-methods","title":"QuerySet Methods","text":""},{"location":"api/orm/#order_byfields","title":"<code>order_by(*fields)</code>","text":"<pre><code>def order_by(*fields: str) -&gt; QuerySet\n</code></pre> <p>Order query set by fields.</p> <p>Parameters: - <code>*fields</code> (str): Field names to order by.</p> <p>Returns: - <code>QuerySet</code>: Ordered query set.</p>"},{"location":"api/orm/#limitcount-int","title":"<code>limit(count: int)</code>","text":"<pre><code>def limit(count: int) -&gt; QuerySet\n</code></pre> <p>Limit number of results.</p> <p>Parameters: - <code>count</code> (int): Maximum number of results.</p> <p>Returns: - <code>QuerySet</code>: Limited query set.</p>"},{"location":"api/orm/#offsetcount-int","title":"<code>offset(count: int)</code>","text":"<pre><code>def offset(count: int) -&gt; QuerySet\n</code></pre> <p>Skip number of results.</p> <p>Parameters: - <code>count</code> (int): Number of results to skip.</p> <p>Returns: - <code>QuerySet</code>: Offset query set.</p>"},{"location":"api/orm/#prefetch_relatedfields","title":"<code>prefetch_related(*fields)</code>","text":"<pre><code>def prefetch_related(*fields: str) -&gt; QuerySet\n</code></pre> <p>Prefetch related objects to avoid N+1 queries.</p> <p>Parameters: - <code>*fields</code> (str): Related field names.</p> <p>Returns: - <code>QuerySet</code>: Query set with prefetched relations.</p>"},{"location":"api/orm/#updatekwargs","title":"<code>update(**kwargs)</code>","text":"<pre><code>async def update(**kwargs) -&gt; int\n</code></pre> <p>Update all instances in query set.</p> <p>Parameters: - <code>**kwargs</code>: Field updates.</p> <p>Returns: - <code>int</code>: Number of updated instances.</p>"},{"location":"api/orm/#delete","title":"<code>delete()</code>","text":"<pre><code>async def delete() -&gt; int\n</code></pre> <p>Delete all instances in query set.</p> <p>Returns: - <code>int</code>: Number of deleted instances.</p>"},{"location":"api/orm/#instance-methods","title":"Instance Methods","text":""},{"location":"api/orm/#save","title":"<code>save()</code>","text":"<pre><code>async def save() -&gt; None\n</code></pre> <p>Save model instance to database.</p>"},{"location":"api/orm/#delete_1","title":"<code>delete()</code>","text":"<pre><code>async def delete() -&gt; None\n</code></pre> <p>Delete model instance from database.</p>"},{"location":"api/orm/#update_from_dictdata-dict","title":"<code>update_from_dict(data: dict)</code>","text":"<pre><code>def update_from_dict(data: dict) -&gt; None\n</code></pre> <p>Update instance fields from dictionary.</p> <p>Parameters: - <code>data</code> (dict): Field values dictionary.</p>"},{"location":"api/orm/#relationships","title":"Relationships","text":""},{"location":"api/orm/#foreign-key","title":"Foreign Key","text":"<pre><code># Access related object\nuser = await User.get(id=1)\nposts = await user.posts.all()\n\n# Create with related object\npost = await Post.create(title=\"Hello\", author=user)\n</code></pre>"},{"location":"api/orm/#many-to-many","title":"Many-to-Many","text":"<pre><code># Add related objects\npost = await Post.get(id=1)\ntag = await Tag.get(name=\"python\")\nawait post.tags.add(tag)\n\n# Remove related objects\nawait post.tags.remove(tag)\n\n# Clear all related objects\nawait post.tags.clear()\n\n# Get related objects\ntags = await post.tags.all()\n</code></pre>"},{"location":"api/orm/#transactions","title":"Transactions","text":""},{"location":"api/orm/#in_transaction","title":"<code>in_transaction</code>","text":"<pre><code>async def in_transaction() -&gt; AsyncContextManager\n</code></pre> <p>Transaction context manager.</p> <p>Example:</p> <pre><code>from fast_django.orm import in_transaction\n\nasync with in_transaction():\n    user = await User.create(username=\"john\")\n    post = await Post.create(title=\"Hello\", author=user)\n</code></pre>"},{"location":"api/orm/#exceptions","title":"Exceptions","text":""},{"location":"api/orm/#doesnotexist","title":"<code>DoesNotExist</code>","text":"<pre><code>class DoesNotExist(Exception):\n    pass\n</code></pre> <p>Raised when model instance is not found.</p>"},{"location":"api/orm/#integrityerror","title":"<code>IntegrityError</code>","text":"<pre><code>class IntegrityError(Exception):\n    pass\n</code></pre> <p>Raised when database integrity constraint is violated.</p>"},{"location":"api/orm/#validationerror","title":"<code>ValidationError</code>","text":"<pre><code>class ValidationError(Exception):\n    pass\n</code></pre> <p>Raised when model validation fails.</p>"}]}